
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sat May 26 14:47:20 CST 2012
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;

/** CUP v0.10k generated parser.
  * @version Sat May 26 14:47:20 CST 2012
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\275\000\002\013\004\000\002\002\004\000\002\013" +
    "\003\000\002\013\003\000\002\013\002\000\002\007\004" +
    "\000\002\007\003\000\002\017\004\000\002\017\003\000" +
    "\002\014\004\000\002\014\003\000\002\014\003\000\002" +
    "\014\004\000\002\040\004\000\002\016\004\000\002\015" +
    "\007\000\002\015\005\000\002\015\003\000\002\003\003" +
    "\000\002\003\005\000\002\003\005\000\002\005\003\000" +
    "\002\005\003\000\002\012\003\000\002\012\003\000\002" +
    "\054\011\000\002\054\010\000\002\054\005\000\002\054" +
    "\012\000\002\054\010\000\002\054\005\000\002\010\002" +
    "\000\002\055\011\000\002\055\011\000\002\055\005\000" +
    "\002\055\012\000\002\055\010\000\002\055\005\000\002" +
    "\056\003\000\002\057\003\000\002\041\004\000\002\041" +
    "\003\000\002\041\004\000\002\051\005\000\002\051\004" +
    "\000\002\051\004\000\002\043\005\000\002\043\004\000" +
    "\002\043\005\000\002\044\004\000\002\044\004\000\002" +
    "\045\005\000\002\045\005\000\002\045\004\000\002\033" +
    "\003\000\002\033\004\000\002\033\004\000\002\033\005" +
    "\000\002\033\003\000\002\033\004\000\002\033\003\000" +
    "\002\026\004\000\002\026\003\000\002\027\004\000\002" +
    "\027\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\004\000\002\011\003" +
    "\000\002\011\003\000\002\011\004\000\002\011\005\000" +
    "\002\011\004\000\002\063\005\000\002\070\002\000\002" +
    "\063\006\000\002\063\004\000\002\071\002\000\002\063" +
    "\006\000\002\063\005\000\002\063\004\000\002\072\002" +
    "\000\002\062\006\000\002\062\004\000\002\073\002\000" +
    "\002\024\007\000\002\024\006\000\002\067\003\000\002" +
    "\067\005\000\002\067\005\000\002\066\005\000\002\066" +
    "\005\000\002\066\003\000\002\066\005\000\002\064\005" +
    "\000\002\064\005\000\002\064\005\000\002\064\003\000" +
    "\002\065\005\000\002\065\004\000\002\065\003\000\002" +
    "\065\003\000\002\065\004\000\002\065\003\000\002\065" +
    "\003\000\002\065\003\000\002\065\003\000\002\004\006" +
    "\000\002\004\003\000\002\004\005\000\002\074\002\000" +
    "\002\006\006\000\002\075\002\000\002\050\005\000\002" +
    "\050\003\000\002\076\002\000\002\047\006\000\002\047" +
    "\003\000\002\037\003\000\002\031\004\000\002\023\004" +
    "\000\002\023\003\000\002\023\003\000\002\032\005\000" +
    "\002\032\003\000\002\032\004\000\002\030\006\000\002" +
    "\030\006\000\002\030\005\000\002\030\006\000\002\030" +
    "\006\000\002\022\010\000\002\022\007\000\002\022\007" +
    "\000\002\022\006\000\002\022\006\000\002\022\007\000" +
    "\002\022\007\000\002\022\010\000\002\025\004\000\002" +
    "\025\007\000\002\025\006\000\002\025\004\000\002\025" +
    "\007\000\002\025\010\000\002\025\006\000\002\025\007" +
    "\000\002\025\006\000\002\025\007\000\002\025\007\000" +
    "\002\025\010\000\002\025\007\000\002\025\004\000\002" +
    "\042\004\000\002\042\004\000\002\060\003\000\002\061" +
    "\003\000\002\021\010\000\002\021\007\000\002\021\010" +
    "\000\002\021\007\000\002\021\007\000\002\021\010\000" +
    "\002\053\004\000\002\053\003\000\002\020\010\000\002" +
    "\020\007\000\002\020\007\000\002\020\010\000\002\020" +
    "\006\000\002\020\007\000\002\052\007\000\002\052\006" +
    "\000\002\052\006\000\002\052\005\000\002\052\007\000" +
    "\002\052\007\000\002\052\007\000\002\077\002\000\002" +
    "\046\011\000\002\046\007\000\002\035\004\000\002\035" +
    "\003\000\002\034\004\000\002\036\006\000\002\036\005" +
    "\000\002\036\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0169\000\020\002\ufffd\003\015\011\004\013\011\015" +
    "\014\016\020\051\013\001\002\000\006\003\u0161\034\u0164" +
    "\001\002\000\004\002\u0160\001\002\000\016\002\uffea\003" +
    "\uffea\011\uffea\015\uffea\016\uffea\051\uffea\001\002\000\016" +
    "\002\uffe9\003\uffe9\011\uffe9\015\uffe9\016\uffe9\051\uffe9\001" +
    "\002\000\016\002\ufff6\003\ufff6\011\ufff6\015\ufff6\016\ufff6" +
    "\051\ufff6\001\002\000\056\002\ufffb\003\ufffb\004\ufffb\011" +
    "\ufffb\013\011\015\ufffb\016\ufffb\020\ufffb\021\ufffb\023\ufffb" +
    "\024\ufffb\025\ufffb\026\ufffb\027\ufffb\034\ufffb\037\ufffb\040" +
    "\ufffb\041\ufffb\042\ufffb\050\ufffb\051\ufffb\052\ufffb\001\002" +
    "\000\004\002\uffff\001\002\000\004\034\u0147\001\002\000" +
    "\006\003\u012d\034\u012f\001\002\000\004\013\011\001\002" +
    "\000\004\013\u012b\001\002\000\016\002\ufff9\003\015\011" +
    "\004\015\014\016\020\051\013\001\002\000\006\003\024" +
    "\034\025\001\002\000\016\002\ufffe\003\015\011\004\015" +
    "\014\016\020\051\013\001\002\000\016\002\ufff7\003\ufff7" +
    "\011\ufff7\015\ufff7\016\ufff7\051\ufff7\001\002\000\004\002" +
    "\001\001\002\000\004\013\011\001\002\000\006\003\uffdb" +
    "\005\uffdb\001\002\000\006\003\030\005\027\001\002\000" +
    "\010\003\u0111\006\u0112\014\u0110\001\002\000\022\002\uffdc" +
    "\003\uffdc\006\u0107\011\uffdc\013\011\015\uffdc\016\uffdc\051" +
    "\uffdc\001\002\000\006\003\033\010\032\001\002\000\006" +
    "\003\u0105\036\u0106\001\002\000\004\013\uffd8\001\002\000" +
    "\004\013\011\001\002\000\032\003\064\004\060\011\004" +
    "\021\051\025\044\026\066\034\046\040\053\041\043\042" +
    "\037\050\045\052\036\001\002\000\010\003\u0101\015\u0100" +
    "\016\u0102\001\002\000\006\003\374\034\245\001\002\000" +
    "\004\017\366\001\002\000\040\003\uffc1\004\060\020\uffc1" +
    "\021\051\023\uffc1\024\uffc1\025\uffc1\026\066\027\uffc1\034" +
    "\046\040\053\041\043\042\037\050\045\052\uffc1\001\002" +
    "\000\040\003\uffbe\004\uffbe\020\uffbe\021\uffbe\023\uffbe\024" +
    "\uffbe\025\uffbe\026\uffbe\027\uffbe\034\uffbe\040\uffbe\041\uffbe" +
    "\042\uffbe\050\uffbe\052\uffbe\001\002\000\010\003\360\034" +
    "\245\037\075\001\002\000\004\016\356\001\002\000\024" +
    "\005\107\013\011\031\076\032\101\033\103\034\113\037" +
    "\075\046\077\054\110\001\002\000\012\003\352\005\116" +
    "\017\uffa8\053\115\001\002\000\020\003\uffcb\020\uffcb\023" +
    "\uffcb\024\uffcb\025\uffcb\027\uffcb\052\036\001\002\000\004" +
    "\025\346\001\002\000\024\003\254\005\107\031\076\032" +
    "\101\033\103\034\113\037\075\046\077\054\110\001\002" +
    "\000\040\003\uffbf\004\uffbf\020\uffbf\021\uffbf\023\uffbf\024" +
    "\uffbf\025\uffbf\026\uffbf\027\uffbf\034\uffbf\040\uffbf\041\uffbf" +
    "\042\uffbf\050\uffbf\052\uffbf\001\002\000\010\003\244\034" +
    "\245\037\075\001\002\000\040\003\uffbd\004\uffbd\020\uffbd" +
    "\021\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\034" +
    "\uffbd\040\uffbd\041\uffbd\042\uffbd\050\uffbd\052\uffbd\001\002" +
    "\000\040\003\uffc7\004\060\020\uffc7\021\051\023\uffc7\024" +
    "\uffc7\025\uffc7\026\066\027\uffc7\034\046\040\053\041\043" +
    "\042\037\050\045\052\036\001\002\000\004\013\011\001" +
    "\002\000\042\003\uffc3\004\uffc3\011\004\020\uffc3\021\uffc3" +
    "\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\034\uffc3\040" +
    "\uffc3\041\uffc3\042\uffc3\050\uffc3\052\uffc3\001\002\000\006" +
    "\003\211\030\212\001\002\000\016\003\uffc5\020\uffc5\023" +
    "\uffc5\024\uffc5\025\uffc5\027\uffc5\001\002\000\004\013\011" +
    "\001\002\000\004\013\011\001\002\000\004\013\011\001" +
    "\002\000\040\003\uffc0\004\uffc0\020\uffc0\021\uffc0\023\uffc0" +
    "\024\uffc0\025\uffc0\026\uffc0\027\uffc0\034\uffc0\040\uffc0\041" +
    "\uffc0\042\uffc0\050\uffc0\052\uffc0\001\002\000\006\003\071" +
    "\034\073\001\002\000\040\003\uffbb\004\uffbb\020\uffbb\021" +
    "\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\034\uffbb" +
    "\040\uffbb\041\uffbb\042\uffbb\050\uffbb\052\uffbb\001\002\000" +
    "\040\003\uffba\004\uffba\020\uffba\021\uffba\023\uffba\024\uffba" +
    "\025\uffba\026\uffba\027\uffba\034\uffba\040\uffba\041\uffba\042" +
    "\uffba\050\uffba\052\uffba\001\002\000\004\013\011\001\002" +
    "\000\004\013\011\001\002\000\004\017\074\001\002\000" +
    "\026\003\106\005\107\007\102\031\076\032\101\033\103" +
    "\034\113\037\075\046\077\054\110\001\002\000\032\006" +
    "\uff93\007\uff93\012\uff93\013\uff93\017\uff93\022\uff93\035\uff93" +
    "\043\uff93\044\uff93\045\uff93\046\uff93\055\164\001\002\000" +
    "\030\006\uff9b\007\uff9b\012\uff9b\013\uff9b\017\uff9b\022\uff9b" +
    "\035\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b\001\002\000" +
    "\022\005\107\031\076\032\101\033\103\034\113\037\075" +
    "\046\077\054\110\001\002\000\022\006\uffa3\007\uffa3\012" +
    "\uffa3\013\uffa3\017\uffa3\022\uffa3\045\uffa3\046\uffa3\001\002" +
    "\000\030\006\uff98\007\uff98\012\uff98\013\uff98\017\uff98\022" +
    "\uff98\035\uff98\043\uff98\044\uff98\045\uff98\046\uff98\001\002" +
    "\000\004\003\162\001\002\000\030\006\uff97\007\uff97\012" +
    "\uff97\013\uff97\017\uff97\022\uff97\035\uff97\043\uff97\044\uff97" +
    "\045\uff97\046\uff97\001\002\000\012\007\157\017\125\045" +
    "\124\046\126\001\002\000\030\006\uff9e\007\uff9e\012\uff9e" +
    "\013\uff9e\017\uff9e\022\uff9e\035\151\043\153\044\152\045" +
    "\uff9e\046\uff9e\001\002\000\006\007\146\013\uff51\001\002" +
    "\000\022\005\107\031\076\032\101\033\103\034\113\037" +
    "\075\046\077\054\110\001\002\000\022\005\107\031\076" +
    "\032\101\033\103\034\113\037\075\046\077\054\110\001" +
    "\002\000\030\006\uff9a\007\uff9a\012\uff9a\013\uff9a\017\uff9a" +
    "\022\uff9a\035\uff9a\043\uff9a\044\uff9a\045\uff9a\046\uff9a\001" +
    "\002\000\030\006\uff95\007\uff95\012\uff95\013\uff95\017\uff95" +
    "\022\uff95\035\uff95\043\uff95\044\uff95\045\uff95\046\uff95\001" +
    "\002\000\034\005\116\006\uffa8\007\uffa8\012\uffa8\013\uffa8" +
    "\017\uffa8\022\uffa8\035\uffa8\043\uffa8\044\uffa8\045\uffa8\046" +
    "\uffa8\053\115\001\002\000\030\006\uff96\007\uff96\012\uff96" +
    "\013\uff96\017\uff96\022\uff96\035\uff96\043\uff96\044\uff96\045" +
    "\uff96\046\uff96\001\002\000\006\003\141\034\142\001\002" +
    "\000\024\005\uff91\006\uff91\031\uff91\032\uff91\033\uff91\034" +
    "\uff91\037\uff91\046\uff91\054\uff91\001\002\000\024\005\107" +
    "\006\120\031\076\032\101\033\103\034\113\037\075\046" +
    "\077\054\110\001\002\000\030\006\uff89\007\uff89\012\uff89" +
    "\013\uff89\017\uff89\022\uff89\035\uff89\043\uff89\044\uff89\045" +
    "\uff89\046\uff89\001\002\000\014\006\uff8f\012\uff8f\017\125" +
    "\045\124\046\126\001\002\000\030\006\uff90\007\uff90\012" +
    "\uff90\013\uff90\017\uff90\022\uff90\035\uff90\043\uff90\044\uff90" +
    "\045\uff90\046\uff90\001\002\000\030\006\uff8d\007\uff8d\012" +
    "\uff8d\013\uff8d\017\uff8d\022\uff8d\035\uff8d\043\uff8d\044\uff8d" +
    "\045\uff8d\046\uff8d\001\002\000\022\005\107\031\076\032" +
    "\101\033\103\034\113\037\075\046\077\054\110\001\002" +
    "\000\022\005\107\031\076\032\101\033\103\034\113\037" +
    "\075\046\077\054\110\001\002\000\022\005\107\031\076" +
    "\032\101\033\103\034\113\037\075\046\077\054\110\001" +
    "\002\000\006\006\120\012\132\001\002\000\030\006\uff8e" +
    "\007\uff8e\012\uff8e\013\uff8e\017\uff8e\022\uff8e\035\uff8e\043" +
    "\uff8e\044\uff8e\045\uff8e\046\uff8e\001\002\000\030\006\uff8a" +
    "\007\uff8a\012\uff8a\013\uff8a\017\uff8a\022\uff8a\035\uff8a\043" +
    "\uff8a\044\uff8a\045\uff8a\046\uff8a\001\002\000\022\005\107" +
    "\031\076\032\101\033\103\034\113\037\075\046\077\054" +
    "\110\001\002\000\014\006\uff8c\012\uff8c\017\125\045\124" +
    "\046\126\001\002\000\006\006\120\012\132\001\002\000" +
    "\030\006\uff8b\007\uff8b\012\uff8b\013\uff8b\017\uff8b\022\uff8b" +
    "\035\uff8b\043\uff8b\044\uff8b\045\uff8b\046\uff8b\001\002\000" +
    "\022\006\uffa4\007\uffa4\012\uffa4\013\uffa4\017\uffa4\022\uffa4" +
    "\045\uffa4\046\uffa4\001\002\000\022\006\uffa2\007\uffa2\012" +
    "\uffa2\013\uffa2\017\uffa2\022\uffa2\045\uffa2\046\uffa2\001\002" +
    "\000\022\006\uffa5\007\uffa5\012\uffa5\013\uffa5\017\uffa5\022" +
    "\uffa5\045\uffa5\046\uffa5\001\002\000\030\006\uffa6\007\uffa6" +
    "\012\uffa6\013\uffa6\017\uffa6\022\uffa6\035\uffa6\043\uffa6\044" +
    "\uffa6\045\uffa6\046\uffa6\001\002\000\030\006\uffa7\007\uffa7" +
    "\012\uffa7\013\uffa7\017\uffa7\022\uffa7\035\uffa7\043\uffa7\044" +
    "\uffa7\045\uffa7\046\uffa7\001\002\000\030\006\uff9c\007\uff9c" +
    "\012\uff9c\013\uff9c\017\uff9c\022\uff9c\035\uff9c\043\uff9c\044" +
    "\uff9c\045\uff9c\046\uff9c\001\002\000\012\006\145\017\125" +
    "\045\124\046\126\001\002\000\030\006\uff9d\007\uff9d\012" +
    "\uff9d\013\uff9d\017\uff9d\022\uff9d\035\uff9d\043\uff9d\044\uff9d" +
    "\045\uff9d\046\uff9d\001\002\000\026\003\150\005\107\013" +
    "\uff52\031\076\032\101\033\103\034\113\037\075\046\077" +
    "\054\110\001\002\000\012\013\uff4e\017\125\045\124\046" +
    "\126\001\002\000\004\013\uff50\001\002\000\022\005\107" +
    "\031\076\032\101\033\103\034\113\037\075\046\077\054" +
    "\110\001\002\000\022\005\107\031\076\032\101\033\103" +
    "\034\113\037\075\046\077\054\110\001\002\000\022\005" +
    "\107\031\076\032\101\033\103\034\113\037\075\046\077" +
    "\054\110\001\002\000\022\006\uffa1\007\uffa1\012\uffa1\013" +
    "\uffa1\017\uffa1\022\uffa1\045\uffa1\046\uffa1\001\002\000\022" +
    "\006\uffa0\007\uffa0\012\uffa0\013\uffa0\017\uffa0\022\uffa0\045" +
    "\uffa0\046\uffa0\001\002\000\022\006\uff9f\007\uff9f\012\uff9f" +
    "\013\uff9f\017\uff9f\022\uff9f\045\uff9f\046\uff9f\001\002\000" +
    "\024\003\161\005\107\031\076\032\101\033\103\034\113" +
    "\037\075\046\077\054\110\001\002\000\012\013\uff54\017" +
    "\125\045\124\046\126\001\002\000\004\013\uff4f\001\002" +
    "\000\004\013\uff53\001\002\000\030\006\uff99\007\uff99\012" +
    "\uff99\013\uff99\017\uff99\022\uff99\035\uff99\043\uff99\044\uff99" +
    "\045\uff99\046\uff99\001\002\000\006\003\165\013\011\001" +
    "\002\000\030\006\uff92\007\uff92\012\uff92\013\uff92\017\uff92" +
    "\022\uff92\035\uff92\043\uff92\044\uff92\045\uff92\046\uff92\001" +
    "\002\000\004\037\075\001\002\000\030\006\uff94\007\uff94" +
    "\012\uff94\013\uff94\017\uff94\022\uff94\035\uff94\043\uff94\044" +
    "\uff94\045\uff94\046\uff94\001\002\000\032\003\172\004\060" +
    "\011\004\021\051\026\066\027\173\034\046\040\053\041" +
    "\043\042\037\050\045\052\036\001\002\000\006\003\175" +
    "\027\176\001\002\000\040\003\uff56\004\uff56\020\uff56\021" +
    "\uff56\023\uff56\024\uff56\025\uff56\026\uff56\027\uff56\034\uff56" +
    "\040\uff56\041\uff56\042\uff56\050\uff56\052\uff56\001\002\000" +
    "\004\013\011\001\002\000\040\003\uff59\004\uff59\020\uff59" +
    "\021\uff59\023\uff59\024\uff59\025\uff59\026\uff59\027\uff59\034" +
    "\uff59\040\uff59\041\uff59\042\uff59\050\uff59\052\uff59\001\002" +
    "\000\040\003\uff55\004\uff55\020\uff55\021\uff55\023\uff55\024" +
    "\uff55\025\uff55\026\uff55\027\uff55\034\uff55\040\uff55\041\uff55" +
    "\042\uff55\050\uff55\052\uff55\001\002\000\004\013\011\001" +
    "\002\000\040\003\uff5a\004\uff5a\020\uff5a\021\uff5a\023\uff5a" +
    "\024\uff5a\025\uff5a\026\uff5a\027\uff5a\034\uff5a\040\uff5a\041" +
    "\uff5a\042\uff5a\050\uff5a\052\uff5a\001\002\000\030\004\060" +
    "\011\004\021\051\026\066\027\202\034\046\040\053\041" +
    "\043\042\037\050\045\052\036\001\002\000\004\027\204" +
    "\001\002\000\004\013\011\001\002\000\040\003\uff58\004" +
    "\uff58\020\uff58\021\uff58\023\uff58\024\uff58\025\uff58\026\uff58" +
    "\027\uff58\034\uff58\040\uff58\041\uff58\042\uff58\050\uff58\052" +
    "\uff58\001\002\000\004\013\011\001\002\000\040\003\uff57" +
    "\004\uff57\020\uff57\021\uff57\023\uff57\024\uff57\025\uff57\026" +
    "\uff57\027\uff57\034\uff57\040\uff57\041\uff57\042\uff57\050\uff57" +
    "\052\uff57\001\002\000\016\002\uffe0\003\uffe0\011\uffe0\015" +
    "\uffe0\016\uffe0\051\uffe0\001\002\000\040\003\uffbc\004\uffbc" +
    "\020\uffbc\021\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027" +
    "\uffbc\034\uffbc\040\uffbc\041\uffbc\042\uffbc\050\uffbc\052\uffbc" +
    "\001\002\000\042\003\ufff4\004\ufff4\011\ufff4\020\ufff4\021" +
    "\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\034\ufff4" +
    "\040\ufff4\041\ufff4\042\ufff4\050\ufff4\052\ufff4\001\002\000" +
    "\022\005\107\031\076\032\101\033\103\034\113\037\075" +
    "\046\077\054\110\001\002\000\024\003\214\005\107\031" +
    "\076\032\101\033\103\034\113\037\075\046\077\054\110" +
    "\001\002\000\012\013\uff64\017\125\045\124\046\126\001" +
    "\002\000\004\013\011\001\002\000\004\013\011\001\002" +
    "\000\032\003\222\004\060\011\004\020\217\021\051\026" +
    "\066\034\046\040\053\041\043\042\037\050\045\052\036" +
    "\001\002\000\004\013\011\001\002\000\006\003\222\020" +
    "\217\001\002\000\040\003\uff61\004\uff61\020\uff61\021\uff61" +
    "\023\uff61\024\uff61\025\uff61\026\uff61\027\uff61\034\uff61\040" +
    "\uff61\041\uff61\042\uff61\050\uff61\052\uff61\001\002\000\040" +
    "\003\uff5b\004\uff5b\020\uff5b\021\uff5b\023\uff5b\024\uff5b\025" +
    "\uff5b\026\uff5b\027\uff5b\034\uff5b\040\uff5b\041\uff5b\042\uff5b" +
    "\050\uff5b\052\uff5b\001\002\000\040\003\uff62\004\uff62\020" +
    "\uff62\021\uff62\023\uff62\024\uff62\025\uff62\026\uff62\027\uff62" +
    "\034\uff62\040\uff62\041\uff62\042\uff62\050\uff62\052\uff62\001" +
    "\002\000\040\003\uff5c\004\uff5c\020\uff5c\021\uff5c\023\uff5c" +
    "\024\uff5c\025\uff5c\026\uff5c\027\uff5c\034\uff5c\040\uff5c\041" +
    "\uff5c\042\uff5c\050\uff5c\052\uff5c\001\002\000\032\003\222" +
    "\004\060\011\004\020\217\021\051\026\066\034\046\040" +
    "\053\041\043\042\037\050\045\052\036\001\002\000\006" +
    "\003\222\020\217\001\002\000\040\003\uff5e\004\uff5e\020" +
    "\uff5e\021\uff5e\023\uff5e\024\uff5e\025\uff5e\026\uff5e\027\uff5e" +
    "\034\uff5e\040\uff5e\041\uff5e\042\uff5e\050\uff5e\052\uff5e\001" +
    "\002\000\040\003\uff5d\004\uff5d\020\uff5d\021\uff5d\023\uff5d" +
    "\024\uff5d\025\uff5d\026\uff5d\027\uff5d\034\uff5d\040\uff5d\041" +
    "\uff5d\042\uff5d\050\uff5d\052\uff5d\001\002\000\004\013\011" +
    "\001\002\000\032\003\222\004\060\011\004\020\217\021" +
    "\051\026\066\034\046\040\053\041\043\042\037\050\045" +
    "\052\036\001\002\000\006\003\222\020\217\001\002\000" +
    "\040\003\uff5f\004\uff5f\020\uff5f\021\uff5f\023\uff5f\024\uff5f" +
    "\025\uff5f\026\uff5f\027\uff5f\034\uff5f\040\uff5f\041\uff5f\042" +
    "\uff5f\050\uff5f\052\uff5f\001\002\000\040\003\uff60\004\uff60" +
    "\020\uff60\021\uff60\023\uff60\024\uff60\025\uff60\026\uff60\027" +
    "\uff60\034\uff60\040\uff60\041\uff60\042\uff60\050\uff60\052\uff60" +
    "\001\002\000\040\003\uffc4\004\uffc4\020\uffc4\021\uffc4\023" +
    "\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\034\uffc4\040\uffc4" +
    "\041\uffc4\042\uffc4\050\uffc4\052\uffc4\001\002\000\016\002" +
    "\uffe1\003\uffe1\011\uffe1\015\uffe1\016\uffe1\051\uffe1\001\002" +
    "\000\020\003\uffc9\020\uffc9\023\uffc9\024\uffc9\025\uffc9\027" +
    "\uffc9\052\036\001\002\000\016\003\uffc6\020\uffc6\023\uffc6" +
    "\024\uffc6\025\uffc6\027\uffc6\001\002\000\016\003\uffc8\020" +
    "\uffc8\023\uffc8\024\uffc8\025\uffc8\027\uffc8\001\002\000\004" +
    "\013\011\001\002\000\040\003\uffb3\004\uffb3\020\uffb3\021" +
    "\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\034\uffb3" +
    "\040\uffb3\041\uffb3\042\uffb3\050\uffb3\052\uffb3\001\002\000" +
    "\006\013\uffa8\053\115\001\002\000\004\013\uffb5\001\002" +
    "\000\004\013\011\001\002\000\040\003\uffb4\004\uffb4\020" +
    "\uffb4\021\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4" +
    "\034\uffb4\040\uffb4\041\uffb4\042\uffb4\050\uffb4\052\uffb4\001" +
    "\002\000\040\003\uffb6\004\uffb6\020\uffb6\021\uffb6\023\uffb6" +
    "\024\uffb6\025\uffb6\026\uffb6\027\uffb6\034\uffb6\040\uffb6\041" +
    "\uffb6\042\uffb6\050\uffb6\052\uffb6\001\002\000\006\013\011" +
    "\022\335\001\002\000\014\013\uff63\017\125\022\uff63\045" +
    "\124\046\126\001\002\000\006\013\011\022\255\001\002" +
    "\000\004\013\011\001\002\000\036\003\265\004\060\011" +
    "\004\021\051\023\257\024\264\025\260\026\066\034\046" +
    "\040\053\041\043\042\037\050\045\052\036\001\002\000" +
    "\006\003\317\013\011\001\002\000\006\003\315\021\316" +
    "\001\002\000\012\003\265\023\257\024\264\025\260\001" +
    "\002\000\004\013\011\001\002\000\040\003\uff78\004\uff78" +
    "\020\uff78\021\uff78\023\uff78\024\uff78\025\uff78\026\uff78\027" +
    "\uff78\034\uff78\040\uff78\041\uff78\042\uff78\050\uff78\052\uff78" +
    "\001\002\000\024\003\270\005\107\031\076\032\101\033" +
    "\103\034\113\037\075\046\077\054\110\001\002\000\004" +
    "\025\260\001\002\000\040\003\uff67\004\uff67\020\uff67\021" +
    "\uff67\023\uff67\024\uff67\025\uff67\026\uff67\027\uff67\034\uff67" +
    "\040\uff67\041\uff67\042\uff67\050\uff67\052\uff67\001\002\000" +
    "\006\013\011\022\302\001\002\000\006\013\011\022\271" +
    "\001\002\000\004\013\011\001\002\000\036\003\265\004" +
    "\060\011\004\021\051\023\257\024\264\025\260\026\066" +
    "\034\046\040\053\041\043\042\037\050\045\052\036\001" +
    "\002\000\012\003\265\023\257\024\264\025\260\001\002" +
    "\000\040\003\uff6c\004\uff6c\020\uff6c\021\uff6c\023\uff6c\024" +
    "\uff6c\025\uff6c\026\uff6c\027\uff6c\034\uff6c\040\uff6c\041\uff6c" +
    "\042\uff6c\050\uff6c\052\uff6c\001\002\000\040\003\uff6a\004" +
    "\uff6a\020\uff6a\021\uff6a\023\uff6a\024\uff6a\025\uff6a\026\uff6a" +
    "\027\uff6a\034\uff6a\040\uff6a\041\uff6a\042\uff6a\050\uff6a\052" +
    "\uff6a\001\002\000\036\003\265\004\060\011\004\021\051" +
    "\023\257\024\264\025\260\026\066\034\046\040\053\041" +
    "\043\042\037\050\045\052\036\001\002\000\012\003\265" +
    "\023\257\024\264\025\260\001\002\000\040\003\uff6b\004" +
    "\uff6b\020\uff6b\021\uff6b\023\uff6b\024\uff6b\025\uff6b\026\uff6b" +
    "\027\uff6b\034\uff6b\040\uff6b\041\uff6b\042\uff6b\050\uff6b\052" +
    "\uff6b\001\002\000\040\003\uff69\004\uff69\020\uff69\021\uff69" +
    "\023\uff69\024\uff69\025\uff69\026\uff69\027\uff69\034\uff69\040" +
    "\uff69\041\uff69\042\uff69\050\uff69\052\uff69\001\002\000\004" +
    "\013\011\001\002\000\036\003\265\004\060\011\004\021" +
    "\051\023\257\024\264\025\260\026\066\034\046\040\053" +
    "\041\043\042\037\050\045\052\036\001\002\000\012\003" +
    "\265\023\257\024\264\025\260\001\002\000\040\003\uff6e" +
    "\004\uff6e\020\uff6e\021\uff6e\023\uff6e\024\uff6e\025\uff6e\026" +
    "\uff6e\027\uff6e\034\uff6e\040\uff6e\041\uff6e\042\uff6e\050\uff6e" +
    "\052\uff6e\001\002\000\040\003\uff70\004\uff70\020\uff70\021" +
    "\uff70\023\uff70\024\uff70\025\uff70\026\uff70\027\uff70\034\uff70" +
    "\040\uff70\041\uff70\042\uff70\050\uff70\052\uff70\001\002\000" +
    "\036\003\265\004\060\011\004\021\051\023\257\024\264" +
    "\025\260\026\066\034\046\040\053\041\043\042\037\050" +
    "\045\052\036\001\002\000\012\003\265\023\257\024\264" +
    "\025\260\001\002\000\040\003\uff6d\004\uff6d\020\uff6d\021" +
    "\uff6d\023\uff6d\024\uff6d\025\uff6d\026\uff6d\027\uff6d\034\uff6d" +
    "\040\uff6d\041\uff6d\042\uff6d\050\uff6d\052\uff6d\001\002\000" +
    "\040\003\uff6f\004\uff6f\020\uff6f\021\uff6f\023\uff6f\024\uff6f" +
    "\025\uff6f\026\uff6f\027\uff6f\034\uff6f\040\uff6f\041\uff6f\042" +
    "\uff6f\050\uff6f\052\uff6f\001\002\000\040\003\uff74\004\uff74" +
    "\020\uff74\021\uff74\023\uff74\024\uff74\025\uff74\026\uff74\027" +
    "\uff74\034\uff74\040\uff74\041\uff74\042\uff74\050\uff74\052\uff74" +
    "\001\002\000\040\003\uff76\004\uff76\020\uff76\021\uff76\023" +
    "\uff76\024\uff76\025\uff76\026\uff76\027\uff76\034\uff76\040\uff76" +
    "\041\uff76\042\uff76\050\uff76\052\uff76\001\002\000\042\003" +
    "\uff65\004\uff65\013\uff65\020\uff65\021\uff65\023\uff65\024\uff65" +
    "\025\uff65\026\uff65\027\uff65\034\uff65\040\uff65\041\uff65\042" +
    "\uff65\050\uff65\052\uff65\001\002\000\042\003\uff66\004\uff66" +
    "\013\uff66\020\uff66\021\uff66\023\uff66\024\uff66\025\uff66\026" +
    "\uff66\027\uff66\034\uff66\040\uff66\041\uff66\042\uff66\050\uff66" +
    "\052\uff66\001\002\000\040\003\uff71\004\uff71\020\uff71\021" +
    "\uff71\023\uff71\024\uff71\025\uff71\026\uff71\027\uff71\034\uff71" +
    "\040\uff71\041\uff71\042\uff71\050\uff71\052\uff71\001\002\000" +
    "\032\003\323\004\060\011\004\021\051\025\260\026\066" +
    "\034\046\040\053\041\043\042\037\050\045\052\036\001" +
    "\002\000\004\013\011\001\002\000\004\025\260\001\002" +
    "\000\004\025\260\001\002\000\004\013\011\001\002\000" +
    "\040\003\uff68\004\uff68\020\uff68\021\uff68\023\uff68\024\uff68" +
    "\025\uff68\026\uff68\027\uff68\034\uff68\040\uff68\041\uff68\042" +
    "\uff68\050\uff68\052\uff68\001\002\000\004\013\011\001\002" +
    "\000\040\003\uff73\004\uff73\020\uff73\021\uff73\023\uff73\024" +
    "\uff73\025\uff73\026\uff73\027\uff73\034\uff73\040\uff73\041\uff73" +
    "\042\uff73\050\uff73\052\uff73\001\002\000\040\003\uff72\004" +
    "\uff72\020\uff72\021\uff72\023\uff72\024\uff72\025\uff72\026\uff72" +
    "\027\uff72\034\uff72\040\uff72\041\uff72\042\uff72\050\uff72\052" +
    "\uff72\001\002\000\036\003\265\004\060\011\004\021\051" +
    "\023\257\024\264\025\260\026\066\034\046\040\053\041" +
    "\043\042\037\050\045\052\036\001\002\000\012\003\265" +
    "\023\257\024\264\025\260\001\002\000\040\003\uff77\004" +
    "\uff77\020\uff77\021\uff77\023\uff77\024\uff77\025\uff77\026\uff77" +
    "\027\uff77\034\uff77\040\uff77\041\uff77\042\uff77\050\uff77\052" +
    "\uff77\001\002\000\040\003\uff75\004\uff75\020\uff75\021\uff75" +
    "\023\uff75\024\uff75\025\uff75\026\uff75\027\uff75\034\uff75\040" +
    "\uff75\041\uff75\042\uff75\050\uff75\052\uff75\001\002\000\004" +
    "\013\011\001\002\000\036\003\265\004\060\011\004\021" +
    "\051\023\257\024\264\025\260\026\066\034\046\040\053" +
    "\041\043\042\037\050\045\052\036\001\002\000\012\003" +
    "\265\023\257\024\264\025\260\001\002\000\040\003\uff79" +
    "\004\uff79\020\uff79\021\uff79\023\uff79\024\uff79\025\uff79\026" +
    "\uff79\027\uff79\034\uff79\040\uff79\041\uff79\042\uff79\050\uff79" +
    "\052\uff79\001\002\000\040\003\uff7b\004\uff7b\020\uff7b\021" +
    "\uff7b\023\uff7b\024\uff7b\025\uff7b\026\uff7b\027\uff7b\034\uff7b" +
    "\040\uff7b\041\uff7b\042\uff7b\050\uff7b\052\uff7b\001\002\000" +
    "\036\003\265\004\060\011\004\021\051\023\257\024\264" +
    "\025\260\026\066\034\046\040\053\041\043\042\037\050" +
    "\045\052\036\001\002\000\012\003\265\023\257\024\264" +
    "\025\260\001\002\000\040\003\uff7a\004\uff7a\020\uff7a\021" +
    "\uff7a\023\uff7a\024\uff7a\025\uff7a\026\uff7a\027\uff7a\034\uff7a" +
    "\040\uff7a\041\uff7a\042\uff7a\050\uff7a\052\uff7a\001\002\000" +
    "\040\003\uff7c\004\uff7c\020\uff7c\021\uff7c\023\uff7c\024\uff7c" +
    "\025\uff7c\026\uff7c\027\uff7c\034\uff7c\040\uff7c\041\uff7c\042" +
    "\uff7c\050\uff7c\052\uff7c\001\002\000\006\003\347\016\350" +
    "\001\002\000\004\013\uffd1\001\002\000\004\013\uffd3\001" +
    "\002\000\016\003\uffca\020\uffca\023\uffca\024\uffca\025\uffca" +
    "\027\uffca\001\002\000\040\003\uffb7\004\uffb7\020\uffb7\021" +
    "\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\034\uffb7" +
    "\040\uffb7\041\uffb7\042\uffb7\050\uffb7\052\uffb7\001\002\000" +
    "\012\013\011\017\125\045\124\046\126\001\002\000\040" +
    "\003\uffb9\004\uffb9\020\uffb9\021\uffb9\023\uffb9\024\uffb9\025" +
    "\uffb9\026\uffb9\027\uffb9\034\uffb9\040\uffb9\041\uffb9\042\uffb9" +
    "\050\uffb9\052\uffb9\001\002\000\040\003\uffb8\004\uffb8\020" +
    "\uffb8\021\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8" +
    "\034\uffb8\040\uffb8\041\uffb8\042\uffb8\050\uffb8\052\uffb8\001" +
    "\002\000\004\013\uffd2\001\002\000\004\013\011\001\002" +
    "\000\040\003\uffaf\004\uffaf\020\uffaf\021\uffaf\023\uffaf\024" +
    "\uffaf\025\uffaf\026\uffaf\027\uffaf\034\uffaf\040\uffaf\041\uffaf" +
    "\042\uffaf\050\uffaf\052\uffaf\001\002\000\004\013\uffb2\001" +
    "\002\000\004\013\011\001\002\000\040\003\uffb1\004\uffb1" +
    "\020\uffb1\021\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027" +
    "\uffb1\034\uffb1\040\uffb1\041\uffb1\042\uffb1\050\uffb1\052\uffb1" +
    "\001\002\000\040\003\uffb0\004\uffb0\020\uffb0\021\uffb0\023" +
    "\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\034\uffb0\040\uffb0" +
    "\041\uffb0\042\uffb0\050\uffb0\052\uffb0\001\002\000\020\003" +
    "\uffc2\020\uffc2\023\uffc2\024\uffc2\025\uffc2\027\uffc2\052\uffc2" +
    "\001\002\000\024\003\370\005\uffab\031\uffab\032\uffab\033" +
    "\uffab\034\uffab\037\uffab\046\uffab\054\uffab\001\002\000\022" +
    "\005\107\031\076\032\101\033\103\034\113\037\075\046" +
    "\077\054\110\001\002\000\004\013\011\001\002\000\040" +
    "\003\uffa9\004\uffa9\020\uffa9\021\uffa9\023\uffa9\024\uffa9\025" +
    "\uffa9\026\uffa9\027\uffa9\034\uffa9\040\uffa9\041\uffa9\042\uffa9" +
    "\050\uffa9\052\uffa9\001\002\000\012\013\011\017\125\045" +
    "\124\046\126\001\002\000\040\003\uffaa\004\uffaa\020\uffaa" +
    "\021\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa\034" +
    "\uffaa\040\uffaa\041\uffaa\042\uffaa\050\uffaa\052\uffaa\001\002" +
    "\000\040\003\uffac\004\uffac\020\uffac\021\uffac\023\uffac\024" +
    "\uffac\025\uffac\026\uffac\027\uffac\034\uffac\040\uffac\041\uffac" +
    "\042\uffac\050\uffac\052\uffac\001\002\000\004\013\uffae\001" +
    "\002\000\004\013\011\001\002\000\040\003\uffad\004\uffad" +
    "\020\uffad\021\uffad\023\uffad\024\uffad\025\uffad\026\uffad\027" +
    "\uffad\034\uffad\040\uffad\041\uffad\042\uffad\050\uffad\052\uffad" +
    "\001\002\000\004\013\011\001\002\000\016\003\uffcc\020" +
    "\uffcc\023\uffcc\024\uffcc\025\uffcc\027\uffcc\001\002\000\004" +
    "\013\011\001\002\000\016\003\uffcd\020\uffcd\023\uffcd\024" +
    "\uffcd\025\uffcd\027\uffcd\001\002\000\016\003\uffce\020\uffce" +
    "\023\uffce\024\uffce\025\uffce\027\uffce\001\002\000\004\013" +
    "\uffd7\001\002\000\004\013\uffd9\001\002\000\006\003\033" +
    "\010\032\001\002\000\030\004\060\011\004\021\051\025" +
    "\044\026\066\034\046\040\053\041\043\042\037\050\045" +
    "\052\036\001\002\000\004\013\011\001\002\000\016\002" +
    "\uffdd\003\uffdd\011\uffdd\015\uffdd\016\uffdd\051\uffdd\001\002" +
    "\000\004\013\011\001\002\000\030\004\060\011\004\021" +
    "\051\025\044\026\066\034\046\040\053\041\043\042\037" +
    "\050\045\052\036\001\002\000\004\013\011\001\002\000" +
    "\016\002\uffde\003\uffde\011\uffde\015\uffde\016\uffde\051\uffde" +
    "\001\002\000\010\003\uff88\010\uff88\013\uff88\001\002\000" +
    "\006\003\u0121\034\u0122\001\002\000\012\003\uff85\010\uff85" +
    "\013\uff85\034\u011b\001\002\000\010\003\uff86\010\uff86\013" +
    "\uff86\001\002\000\010\003\u0114\006\u0116\012\u0115\001\002" +
    "\000\004\006\u0120\001\002\000\006\003\u0118\014\u0110\001" +
    "\002\000\010\003\uff83\010\uff83\013\uff83\001\002\000\010" +
    "\003\uff87\010\uff87\013\uff87\001\002\000\004\034\u011b\001" +
    "\002\000\010\003\u0114\006\u0116\012\u0115\001\002\000\010" +
    "\003\uff84\010\uff84\013\uff84\001\002\000\004\010\u011c\001" +
    "\002\000\006\034\u011e\036\u011f\001\002\000\010\003\uff7d" +
    "\006\uff7d\012\uff7d\001\002\000\012\003\uffeb\006\uffeb\012" +
    "\uffeb\013\uffeb\001\002\000\012\003\uffec\006\uffec\012\uffec" +
    "\013\uffec\001\002\000\010\003\uff82\010\uff82\013\uff82\001" +
    "\002\000\004\010\u0127\001\002\000\006\003\u0124\010\u0123" +
    "\001\002\000\010\003\u0125\034\u011e\036\u011f\001\002\000" +
    "\010\003\uff7f\006\uff7f\012\uff7f\001\002\000\010\003\uff80" +
    "\006\uff80\012\uff80\001\002\000\010\003\uff81\006\uff81\012" +
    "\uff81\001\002\000\006\034\u011e\036\u011f\001\002\000\010" +
    "\003\uff7e\006\uff7e\012\uff7e\001\002\000\016\002\uffdf\003" +
    "\uffdf\011\uffdf\015\uffdf\016\uffdf\051\uffdf\001\002\000\004" +
    "\002\ufffa\001\002\000\016\002\ufff8\003\ufff8\011\ufff8\015" +
    "\ufff8\016\ufff8\051\ufff8\001\002\000\016\002\ufff5\003\ufff5" +
    "\011\ufff5\015\ufff5\016\ufff5\051\ufff5\001\002\000\004\013" +
    "\011\001\002\000\006\003\u0130\005\027\001\002\000\006" +
    "\003\uffda\005\uffda\001\002\000\022\002\uffe3\003\uffe3\006" +
    "\u013e\011\uffe3\013\011\015\uffe3\016\uffe3\051\uffe3\001\002" +
    "\000\004\013\011\001\002\000\032\003\u0134\004\uffe2\011" +
    "\uffe2\021\uffe2\025\uffe2\026\uffe2\034\uffe2\040\uffe2\041\uffe2" +
    "\042\uffe2\050\uffe2\052\uffe2\001\002\000\030\004\060\011" +
    "\004\021\051\025\u0137\026\066\034\046\040\053\041\043" +
    "\042\037\050\045\052\036\001\002\000\004\013\011\001" +
    "\002\000\016\002\uffe7\003\uffe7\011\uffe7\015\uffe7\016\uffe7" +
    "\051\uffe7\001\002\000\004\013\011\001\002\000\006\003" +
    "\u013c\015\u013b\001\002\000\004\025\u0139\001\002\000\004" +
    "\015\u013a\001\002\000\004\013\uffd6\001\002\000\004\013" +
    "\uffd5\001\002\000\004\013\uffd4\001\002\000\016\002\uffe8" +
    "\003\uffe8\011\uffe8\015\uffe8\016\uffe8\051\uffe8\001\002\000" +
    "\006\003\033\010\032\001\002\000\030\004\060\011\004" +
    "\021\051\025\044\026\066\034\046\040\053\041\043\042" +
    "\037\050\045\052\036\001\002\000\004\013\011\001\002" +
    "\000\016\002\uffe4\003\uffe4\011\uffe4\015\uffe4\016\uffe4\051" +
    "\uffe4\001\002\000\004\013\011\001\002\000\030\004\060" +
    "\011\004\021\051\025\044\026\066\034\046\040\053\041" +
    "\043\042\037\050\045\052\036\001\002\000\004\013\011" +
    "\001\002\000\016\002\uffe5\003\uffe5\011\uffe5\015\uffe5\016" +
    "\uffe5\051\uffe5\001\002\000\016\002\uffe6\003\uffe6\011\uffe6" +
    "\015\uffe6\016\uffe6\051\uffe6\001\002\000\006\003\u0148\013" +
    "\011\001\002\000\004\025\u0158\001\002\000\010\003\uff4d" +
    "\011\uff4d\034\uff4d\001\002\000\010\003\u014c\011\u014f\034" +
    "\u0150\001\002\000\004\013\011\001\002\000\004\013\uff45" +
    "\001\002\000\004\025\u0158\001\002\000\012\003\u014c\011" +
    "\u014f\025\uff49\034\u0150\001\002\000\004\034\u0153\001\002" +
    "\000\004\010\u0151\001\002\000\006\034\u011e\036\u011f\001" +
    "\002\000\004\013\uff46\001\002\000\004\010\u0154\001\002" +
    "\000\006\034\u011e\036\u011f\001\002\000\004\013\uff47\001" +
    "\002\000\004\025\uff4a\001\002\000\004\013\011\001\002" +
    "\000\006\003\u0159\051\u015a\001\002\000\004\013\uffcf\001" +
    "\002\000\004\013\uffd0\001\002\000\016\002\uff4c\003\uff4c" +
    "\011\uff4c\015\uff4c\016\uff4c\051\uff4c\001\002\000\012\003" +
    "\uff48\011\uff48\025\uff48\034\uff48\001\002\000\004\013\011" +
    "\001\002\000\016\002\uff4b\003\uff4b\011\uff4b\015\uff4b\016" +
    "\uff4b\051\uff4b\001\002\000\054\002\ufffc\003\ufffc\004\ufffc" +
    "\011\ufffc\015\ufffc\016\ufffc\020\ufffc\021\ufffc\023\ufffc\024" +
    "\ufffc\025\ufffc\026\ufffc\027\ufffc\034\ufffc\037\ufffc\040\ufffc" +
    "\041\ufffc\042\ufffc\050\ufffc\051\ufffc\052\ufffc\001\002\000" +
    "\004\002\000\001\002\000\004\013\ufff0\001\002\000\004" +
    "\013\ufff3\001\002\000\004\010\u0168\001\002\000\006\010" +
    "\uffef\012\u0165\001\002\000\006\003\u0166\034\u0164\001\002" +
    "\000\004\010\uffed\001\002\000\004\010\uffee\001\002\000" +
    "\006\034\u011e\036\u011f\001\002\000\006\012\u016a\013\ufff1" +
    "\001\002\000\006\003\u0161\034\u0164\001\002\000\004\013" +
    "\ufff2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0169\000\024\007\020\012\021\013\004\014\016\016" +
    "\015\017\011\046\007\054\005\055\006\001\001\000\006" +
    "\003\u0162\015\u0161\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\u015e" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\057" +
    "\u012d\001\001\000\004\007\u012b\001\001\000\002\001\001" +
    "\000\020\012\021\014\016\016\015\017\u0129\046\007\054" +
    "\005\055\006\001\001\000\004\056\025\001\001\000\020" +
    "\012\021\014\016\016\015\017\022\046\007\054\005\055" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\u0128\001\001\000\002\001\001\000\004\031\030\001" +
    "\001\000\006\023\u010e\030\u0112\001\001\000\004\007\u0107" +
    "\001\001\000\004\041\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\034\001\001\000\042\006\062" +
    "\011\040\016\061\020\051\021\041\022\064\024\053\026" +
    "\054\027\046\033\047\040\056\043\055\045\060\062\067" +
    "\063\066\067\037\001\001\000\002\001\001\000\004\067" +
    "\374\001\001\000\002\001\001\000\026\006\062\011\040" +
    "\020\051\021\041\022\064\024\053\027\364\062\067\063" +
    "\066\067\037\001\001\000\002\001\001\000\006\004\356" +
    "\067\360\001\001\000\002\001\001\000\020\004\113\006" +
    "\111\007\353\064\077\065\104\066\352\067\110\001\001" +
    "\000\002\001\001\000\004\045\350\001\001\000\002\001" +
    "\001\000\020\004\113\006\111\061\251\064\077\065\104" +
    "\066\252\067\110\001\001\000\002\001\001\000\006\004" +
    "\242\067\245\001\001\000\002\001\001\000\030\006\062" +
    "\011\040\020\051\021\041\022\064\024\053\027\237\045" +
    "\240\062\067\063\066\067\037\001\001\000\004\007\236" +
    "\001\001\000\010\016\061\026\235\040\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\207\001\001" +
    "\000\004\007\206\001\001\000\004\007\205\001\001\000" +
    "\002\001\001\000\004\052\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\177\001\001\000\004\007" +
    "\167\001\001\000\002\001\001\000\016\004\113\006\111" +
    "\064\077\065\104\066\103\067\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\004\113\006\111\065\162" +
    "\067\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\004\113\006\111\064" +
    "\077\065\104\066\143\067\110\001\001\000\012\004\113" +
    "\006\111\065\142\067\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\074\116\001\001\000\022\004\113\006" +
    "\111\037\122\050\121\064\077\065\104\066\120\067\110" +
    "\001\001\000\002\001\001\000\004\075\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\004\113\006\111" +
    "\064\137\065\104\067\110\001\001\000\014\004\113\006" +
    "\111\064\136\065\104\067\110\001\001\000\014\004\113" +
    "\006\111\064\135\065\104\067\110\001\001\000\006\037" +
    "\130\047\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\004\113\006\111\064\077\065\104\066\132\067" +
    "\110\001\001\000\004\076\133\001\001\000\006\037\130" +
    "\047\134\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\004\113\006\111\064\077\065\104\066\146" +
    "\067\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\004\113\006\111\064\155\065\104\067\110\001\001" +
    "\000\014\004\113\006\111\064\154\065\104\067\110\001" +
    "\001\000\014\004\113\006\111\064\153\065\104\067\110" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\004\113\006\111\064\077\065\104\066\157" +
    "\067\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\165\001\001" +
    "\000\002\001\001\000\004\004\166\001\001\000\002\001" +
    "\001\000\040\006\062\011\040\016\061\020\051\021\041" +
    "\022\064\024\053\026\054\027\046\033\170\040\056\045" +
    "\060\062\067\063\066\067\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\173\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\176\001\001\000\002" +
    "\001\001\000\040\006\062\011\040\016\061\020\051\021" +
    "\041\022\064\024\053\026\054\027\046\033\200\040\056" +
    "\045\060\062\067\063\066\067\037\001\001\000\002\001" +
    "\001\000\004\007\202\001\001\000\002\001\001\000\004" +
    "\007\204\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\004\113\006\111" +
    "\060\230\064\077\065\104\066\212\067\110\001\001\000" +
    "\020\004\113\006\111\060\214\064\077\065\104\066\212" +
    "\067\110\001\001\000\002\001\001\000\004\007\224\001" +
    "\001\000\004\007\215\001\001\000\042\006\062\011\040" +
    "\016\061\020\051\021\041\022\064\024\053\026\054\027" +
    "\046\033\217\040\056\045\060\053\220\062\067\063\066" +
    "\067\037\001\001\000\004\007\223\001\001\000\004\053" +
    "\222\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\006\062\011\040\016" +
    "\061\020\051\021\041\022\064\024\053\026\054\027\046" +
    "\033\225\040\056\045\060\053\226\062\067\063\066\067" +
    "\037\001\001\000\004\053\227\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\231\001\001\000\042\006" +
    "\062\011\040\016\061\020\051\021\041\022\064\024\053" +
    "\026\054\027\046\033\232\040\056\045\060\053\233\062" +
    "\067\063\066\067\037\001\001\000\004\053\234\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\045\241\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\250\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\070\246\001\001\000\004" +
    "\007\247\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\335\001\001\000\002\001\001\000\004\007\255" +
    "\001\001\000\004\007\330\001\001\000\044\006\062\011" +
    "\040\016\061\020\051\021\041\022\064\024\053\025\262" +
    "\026\054\027\046\033\260\040\056\042\261\045\060\062" +
    "\067\063\066\067\037\001\001\000\004\007\317\001\001" +
    "\000\002\001\001\000\006\025\313\042\261\001\001\000" +
    "\004\007\312\001\001\000\002\001\001\000\020\004\113" +
    "\006\111\061\266\064\077\065\104\066\252\067\110\001" +
    "\001\000\004\042\265\001\001\000\002\001\001\000\004" +
    "\007\302\001\001\000\004\007\271\001\001\000\004\007" +
    "\275\001\001\000\044\006\062\011\040\016\061\020\051" +
    "\021\041\022\064\024\053\025\273\026\054\027\046\033" +
    "\272\040\056\042\261\045\060\062\067\063\066\067\037" +
    "\001\001\000\006\025\274\042\261\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\006\062\011\040\016\061" +
    "\020\051\021\041\022\064\024\053\025\277\026\054\027" +
    "\046\033\276\040\056\042\261\045\060\062\067\063\066" +
    "\067\037\001\001\000\006\025\300\042\261\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\306\001\001" +
    "\000\044\006\062\011\040\016\061\020\051\021\041\022" +
    "\064\024\053\025\304\026\054\027\046\033\303\040\056" +
    "\042\261\045\060\062\067\063\066\067\037\001\001\000" +
    "\006\025\305\042\261\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\006\062\011\040\016\061\020\051\021" +
    "\041\022\064\024\053\025\310\026\054\027\046\033\307" +
    "\040\056\042\261\045\060\062\067\063\066\067\037\001" +
    "\001\000\006\025\311\042\261\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\006\062\011\040\016\061\020\051\021\041\022\064\024" +
    "\053\026\054\027\046\033\321\040\056\042\320\045\060" +
    "\062\067\063\066\067\037\001\001\000\004\007\327\001" +
    "\001\000\004\042\325\001\001\000\004\042\323\001\001" +
    "\000\004\007\324\001\001\000\002\001\001\000\004\007" +
    "\326\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\006\062\011\040\016\061\020\051\021\041\022\064\024" +
    "\053\025\332\026\054\027\046\033\331\040\056\042\261" +
    "\045\060\062\067\063\066\067\037\001\001\000\006\025" +
    "\333\042\261\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\341\001\001\000\044\006\062\011\040\016" +
    "\061\020\051\021\041\022\064\024\053\025\337\026\054" +
    "\027\046\033\336\040\056\042\261\045\060\062\067\063" +
    "\066\067\037\001\001\000\006\025\340\042\261\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\006\062\011" +
    "\040\016\061\020\051\021\041\022\064\024\053\025\343" +
    "\026\054\027\046\033\342\040\056\042\261\045\060\062" +
    "\067\063\066\067\037\001\001\000\006\025\344\042\261" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\354\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\363" +
    "\001\001\000\002\001\001\000\004\071\361\001\001\000" +
    "\004\007\362\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\073\366\001\001\000\016\004" +
    "\113\006\111\064\077\065\104\066\371\067\110\001\001" +
    "\000\004\007\370\001\001\000\002\001\001\000\004\007" +
    "\372\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\072\375\001\001\000\004\007\376\001\001\000\002\001" +
    "\001\000\004\007\u0103\001\001\000\002\001\001\000\004" +
    "\007\u0102\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\041\u010a\001\001" +
    "\000\042\006\062\011\040\016\061\020\051\021\041\022" +
    "\064\024\053\026\054\027\046\033\047\040\056\043\u0108" +
    "\045\060\062\067\063\066\067\037\001\001\000\004\007" +
    "\u0109\001\001\000\002\001\001\000\004\007\u010b\001\001" +
    "\000\042\006\062\011\040\016\061\020\051\021\041\022" +
    "\064\024\053\026\054\027\046\033\047\040\056\043\u010c" +
    "\045\060\062\067\063\066\067\037\001\001\000\004\007" +
    "\u010d\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\u0116\001\001\000\002\001\001\000\004\030\u0118\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\u0119\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\u011c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\u0125\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\u0127" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\u0145" +
    "\001\001\000\004\031\u0130\001\001\000\002\001\001\000" +
    "\004\007\u013e\001\001\000\004\007\u0131\001\001\000\004" +
    "\010\u0132\001\001\000\042\006\062\011\040\016\061\020" +
    "\051\021\041\022\064\024\053\026\054\027\046\033\u0137" +
    "\040\056\045\060\051\u0135\062\067\063\066\067\037\001" +
    "\001\000\004\007\u0134\001\001\000\002\001\001\000\004" +
    "\007\u013c\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\041\u0141\001\001\000" +
    "\042\006\062\011\040\016\061\020\051\021\041\022\064" +
    "\024\053\026\054\027\046\033\047\040\056\043\u013f\045" +
    "\060\062\067\063\066\067\037\001\001\000\004\007\u0140" +
    "\001\001\000\002\001\001\000\004\007\u0142\001\001\000" +
    "\042\006\062\011\040\016\061\020\051\021\041\022\064" +
    "\024\053\026\054\027\046\033\047\040\056\043\u0143\045" +
    "\060\062\067\063\066\067\037\001\001\000\004\007\u0144" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\u0148\001\001\000\004\044\u015c\001\001\000\004\077\u0149" +
    "\001\001\000\010\034\u014d\035\u014c\036\u014a\001\001\000" +
    "\004\007\u015b\001\001\000\002\001\001\000\004\044\u0156" +
    "\001\001\000\010\034\u014d\035\u0155\036\u014a\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\u0151\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\u0154\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\u015a" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\u015d" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\u0166\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\u0168\001\001\000\002" +
    "\001\001\000\006\003\u0162\015\u016a\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



 
    String errores = "";
    Boolean has_main = false;
    Boolean first_time = true; 
    Boolean in_method = false;
    ArrayList<Custom_Error> compile_error;
    tabla ambito;
    HashMap<String,Tipo> seen_types;
    Tipo tmp_tipo;
    CodigoIntermedioTools IMips;
    int linea_last; 
    ArrayList<Objeto> params; // = new ArrayList<Tipo>();
  
    public  void addError(String errmsg,int line){
        this.compile_error.add(new Custom_Error(line,errmsg)); 
    }

    public int sizeof(String name){
     if(name.equals("variant") || name.equals("integer") || name.equals("string") )
      return 4;
    else if(name.equals("boolean") || name.equals("char"))
      return 1;
      return 0;
    }
    public void report_error(String message, Object info) {
      StringBuffer m = new StringBuffer("Error");
      int linea = 0;
		 if(info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s=((java_cup.runtime.Symbol)info);
			if(s.left >= 0) {
				m.append(" en linea "+(s.left+1));
        linea = s.left+1;
        linea_last = s.left+1;
				if (s.right >= 0)
					m.append(", y columna "+(s.right+1));
			}
		}
        message = message.replaceAll("Syntax error","Error de sintaxis");
 		    m.append(" : "+message);
 
        errores += m;
        errores += "\n";
        errores = "\n" + errores;
       if(!first_time && !message.equals("Error de sintaxis")){
           addError(errores,(Integer)linea_last);
      }
 }

    public void report_fatal_error(String message, Object info) {
          message = message.replaceAll("Couldn't repair and continue parse","No se pudo recuperar");
        	report_error(message, info);
        
		System.exit(1);
    }

    public void report_semantic_error(String error,int linea,int columna){
      //System.out.println("Error semantico en la linea: "  + (linea+1) + " columna: "  + (columna+1) + "\n" + error  );
      String errorF = "\nError semantico en la linea: "  + (linea+1) + " columna: "  + (columna+1) + "\n" + error  ;
      addError(errorF,(linea+1));
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // declaracion2 ::= error 
            {
              Object RESULT = null;
		 if(!parser.first_time) parser.report_error("Se esperaba <id> As <tipo> ",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(28/*declaracion2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // declaracion2 ::= NAME AS tipo 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Tipo t1 = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
              int linea = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).left;
              int columna = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).right;

                if( parser.first_time) {

                        if( t1.getName().equals("void"))
                            parser.report_semantic_error("Variable <" + n1 +  "> no se puede declarar tipo void",linea,columna);
                         else{
                                      boolean meter =parser.tmp_tipo.agregar_atributos(n1,t1);
                                     if(!meter) parser.report_semantic_error("No se puede agregar atributo de nombre " + n1 + " ya existe en este contexto",linea,columna);
                       }
                   }
        
              CUP$parser$result = new java_cup.runtime.Symbol(28/*declaracion2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // declaracion2 ::= DIM NAME AS tipo 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Tipo t1 = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
              int linea = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).left;
              int columna = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).right;

              if(parser.first_time){ 
                        if( t1.getName().equals("void"))
                            parser.report_semantic_error("Variable <" + n1 +  "> no se puede declarar tipo void",linea,columna);
                      
                      else { boolean meter = parser.tmp_tipo.agregar_atributos(n1,t1);
                      
      if(!meter) parser.report_semantic_error("No se puede agregar atributo de nombre " + n1 + " ya existe en este contexto",linea,columna);
                                     } }  
              CUP$parser$result = new java_cup.runtime.Symbol(28/*declaracion2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // variables_declar2 ::= declaracion2 fin 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(26/*variables_declar2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // list_declar2 ::= variables_declar2 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(27/*list_declar2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // list_declar2 ::= variables_declar2 list_declar2 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(27/*list_declar2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // dectype ::= TYPE NAME error end_type fin 
            {
              Object RESULT = null;
		 if(!parser.first_time) parser.report_error(" estructura no puede estar vacia",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(36/*dectype*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // dectype ::= TYPE NAME fin NT$7 list_declar2 end_type fin 
            {
              Object RESULT = null;
              // propagate RESULT from NT$7
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		 if(parser.first_time) {parser.seen_types.put(n1,parser.tmp_tipo);
                                                        } 
              CUP$parser$result = new java_cup.runtime.Symbol(36/*dectype*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // NT$7 ::= 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 if(parser.first_time) {parser.tmp_tipo = new Tipo(n1); parser.tmp_tipo.setTipoFinal(3);} 
              CUP$parser$result = new java_cup.runtime.Symbol(61/*NT$7*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // rango ::= NAME IGUAL error TO expression 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Se esperaba valor de inicio",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(40/*rango*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // rango ::= NAME IGUAL expression TO error 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Se esperaba valor de final",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(40/*rango*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // rango ::= NAME IGUAL error TO error 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Error de rangos",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(40/*rango*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // rango ::= NAME IGUAL error 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Error de rangos/asignacion",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(40/*rango*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // rango ::= NAME IGUAL error TO 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Error de rangos, valor inicial y final",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(40/*rango*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // rango ::= NAME IGUAL TO error 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Error de rangos, no existe valor inicial",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(40/*rango*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // rango ::= NAME IGUAL expression TO expression 
            {
              Object RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto t1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Objeto t2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
               int linea = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).left;
               int columna = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).right;
                
              if(!parser.first_time){
                  if( !t1.t.getName().equals("integer") )
                      parser.report_semantic_error("Rango no numerico en expression inicial",linea,columna);
                  if( !t2.t.getName().equals("integer"))
                      parser.report_semantic_error("Rango no numerico en expression inicial",linea,columna);
              }

          
              CUP$parser$result = new java_cup.runtime.Symbol(40/*rango*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // loop_for ::= FOR rango fin bloque error 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Se esperaba un Next",sym.NEXT); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*loop_for*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // loop_for ::= FOR rango fin error 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Se esperaba un Next",sym.NEXT); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*loop_for*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // loop_for ::= FOR error fin bloque NEXT fin 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Error en rango",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*loop_for*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // loop_for ::= FOR error fin NEXT fin 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Error en rango",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*loop_for*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // loop_for ::= FOR rango fin NEXT fin 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*loop_for*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // loop_for ::= FOR rango fin bloque NEXT fin 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*loop_for*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // salir_loop ::= error 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("se esperaba salida de while",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(41/*salir_loop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // salir_loop ::= LOOP fin 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(41/*salir_loop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // do_loop ::= DO WHILE error fin bloque salir_loop 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Se esperaba expresion booleana",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*do_loop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // do_loop ::= DO WHILE error fin salir_loop 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Se esperaba expresion booleana",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*do_loop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // do_loop ::= DO error fake_while fin salir_loop 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Se esperaba While <expresion booleana> ",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*do_loop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // do_loop ::= DO error fake_while fin bloque salir_loop 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Se esperaba While <expresion booleana> ",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*do_loop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // do_loop ::= DO WHILE fake_while fin salir_loop 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*do_loop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // do_loop ::= DO WHILE fake_while fin bloque salir_loop 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*do_loop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // fake_if ::= expression 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
              int linea = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).left;
              int columna = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).right;
                if(!parser.first_time){
                  if(!e.t.getName().equals("boolean")){
                      if(!( e.t.getName().equals("variant") && e.TipoExtraVariant.getName().equals("boolean")))
                         parser.report_semantic_error("Se esperaba expression booleana dentro del If",linea,columna);
                  }
                }              
  
              
              CUP$parser$result = new java_cup.runtime.Symbol(47/*fake_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // fake_while ::= expression 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		

                    int linea = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).left;
                    int columna = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).right;

                if(!parser.first_time){
                  if(!e.t.getName().equals("boolean") ){
                      parser.report_semantic_error("Se esperaba expression booleana dentro de ciclo while",linea,columna);
                  }
                }              
  
              
              CUP$parser$result = new java_cup.runtime.Symbol(46/*fake_while*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // salir_if ::= END error 
            {
              Object RESULT = null;
		if (!parser.first_time) parser.report_error("Se esperaba End If",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(32/*salir_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // salir_if ::= END IF 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(32/*salir_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // if_inner ::= error salir_if 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Error del bloque if, sentencia no esperada",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*if_inner*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // if_inner ::= ELSE fin error salir_if fin 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Sentencia inesperada despues del Else",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*if_inner*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // if_inner ::= ELSEIF error THEN fin bloque if_inner 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Se esperaba expresion booleana",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*if_inner*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // if_inner ::= ELSEIF error fin bloque if_inner 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Se esperaba expresion booleana",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*if_inner*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // if_inner ::= ELSEIF error THEN fin if_inner 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Se esperaba expresion booleana",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*if_inner*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // if_inner ::= ELSEIF error fin if_inner 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Se esperaba expresion booleana",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*if_inner*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // if_inner ::= ELSEIF fake_if THEN fin if_inner 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*if_inner*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // if_inner ::= ELSEIF fake_if fin if_inner 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*if_inner*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // if_inner ::= ELSEIF fake_if THEN fin bloque if_inner 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*if_inner*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // if_inner ::= ELSEIF fake_if fin bloque if_inner 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*if_inner*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // if_inner ::= ELSE error 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Error en expresion Else",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*if_inner*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // if_inner ::= ELSE fin salir_if fin 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*if_inner*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // if_inner ::= ELSE fin bloque salir_if fin 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*if_inner*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // if_inner ::= salir_if fin 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*if_inner*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // if_block ::= IF error THEN fin bloque if_inner 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Se esperaba expresion booleana",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*if_block*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // if_block ::= IF error fin bloque if_inner 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Se esperaba expresion booleana",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*if_block*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // if_block ::= IF error THEN fin if_inner 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Se esperaba expresion booleana",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*if_block*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // if_block ::= IF error fin if_inner 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Se esperaba expresion booleana",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*if_block*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // if_block ::= IF fake_if fin if_inner 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*if_block*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // if_block ::= IF fake_if THEN fin if_inner 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*if_block*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // if_block ::= IF fake_if fin bloque if_inner 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*if_block*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // if_block ::= IF fake_if THEN fin bloque if_inner 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*if_block*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // argument ::= error NAME AS tipo 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("error en argumento, no existe tipo de referencia",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*argument*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // argument ::= REF error AS tipo 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error(" error en argumento, no existe nombre de argumento",sym.NAME); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*argument*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // argument ::= REF NAME error 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error(" error en argumento, se esperaba As <un tipo de dato>",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*argument*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // argument ::= REF NAME AS error 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error(" error en argumento, se esperaba un tipo de dato",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*argument*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // argument ::= REF NAME AS tipo 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                                      if(parser.first_time){ 
                                          boolean meter = parser.ambito.agregarATabla(n1,t);
                                          int linea = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).left;
                                          int columna = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).right;
                                          if(!meter) parser.report_semantic_error("Variable <" + n1 + "> ya ha sido utilizada como parametro",linea,columna);
                                          parser.tmp_tipo.metodo_var.add(t);
                                        }
                                    
              CUP$parser$result = new java_cup.runtime.Symbol(22/*argument*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // argumentlistHelper ::= error PARIZQ 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("error de argumentos",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*argumentlistHelper*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // argumentlistHelper ::= PARIZQ 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(24/*argumentlistHelper*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // argumentlistHelper ::= SEPARADOR argument argumentlistHelper 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(24/*argumentlistHelper*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // schrodingerArgument ::= error 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("error de argumentos",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*schrodingerArgument*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // schrodingerArgument ::= PARIZQ 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*schrodingerArgument*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // schrodingerArgument ::= argument argumentlistHelper 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*schrodingerArgument*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // argumentlist ::= PARDER schrodingerArgument 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*argumentlist*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // salir_param ::= PARIZQ 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(29/*salir_param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // paramHelper ::= salir_param 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(37/*paramHelper*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // paramHelper ::= SEPARADOR expression NT$6 paramHelper 
            {
              Object RESULT = null;
              // propagate RESULT from NT$6
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(37/*paramHelper*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$6 ::= 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
if(!parser.first_time){parser.params.add(e); 
                                         parser.IMips.gen("PARAM",e.getLugar(),"","");}

                
              CUP$parser$result = new java_cup.runtime.Symbol(60/*NT$6*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // parametros ::= salir_param 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(38/*parametros*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // parametros ::= expression NT$5 paramHelper 
            {
              Object RESULT = null;
              // propagate RESULT from NT$5
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(38/*parametros*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NT$5 ::= 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
 if(!parser.first_time) {parser.params.add(e);
                                    parser.IMips.gen("PARAM",e.getLugar(),"","");
                                  }
                   
                    
              CUP$parser$result = new java_cup.runtime.Symbol(59/*NT$5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // funcionCall ::= NAME PARDER NT$4 parametros 
            {
              Tipo RESULT = null;
              // propagate RESULT from NT$4
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Tipo) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
            
             int linea = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).left;
             int columna = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).right;
                if(!parser.first_time){
                parser.IMips.gen("CALL",n1,"",""); 
               boolean valido = true;
                Tipo tmp = parser.seen_types.get(n1);
                if(tmp == null){
                      parser.report_semantic_error(" No existe metodo con nombre " + n1 ,linea,columna);
                      RESULT = parser.seen_types.get("error");
                }
                else{
                  if (tmp.metodo_var.size()-1 != parser.params.size() ){
                    parser.report_semantic_error(" Error de argumentos,se esperaban: " + (tmp.metodo_var.size() -1) + " recibidos:" + parser.params.size(),linea,columna); 
                  }
                  else{
                    for( int i = 0; i < parser.params.size();i++){
                            if(!parser.params.get(i).t.getName().equals(tmp.metodo_var.get(i).getName())){
                              if( tmp.metodo_var.get(i).getName().equals("char") && parser.params.get(i).t.getName().equals("string"))   {
                                 if ( parser.params.get(i).SizeChain <= 1)
                                    continue;
                              }
                              parser.report_semantic_error(" Error de argumento " + i + " se esperaba " +  tmp.metodo_var.get(i).getName() + " recibio " + parser.params.get(i).t,linea,columna);
                          }
                    }
                  }
                  
                   RESULT = tmp.metodo_var.get( tmp.metodo_var.size()-1);
                }
          }
            
              CUP$parser$result = new java_cup.runtime.Symbol(4/*funcionCall*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$4 ::= 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 if(!parser.first_time) parser.params = new ArrayList<Objeto>();
              CUP$parser$result = new java_cup.runtime.Symbol(58/*NT$4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // cadena_s ::= CADENA SALTOCADENA error 
            {
              String RESULT = null;
		 if (!parser.first_time) parser.report_error("Se esperaba nueva cadena",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*cadena_s*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // cadena_s ::= CADENA 
            {
              String RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                      RESULT = c; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*cadena_s*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // cadena_s ::= CADENA SALTOCADENA fin cadena_s 
            {
              String RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String sig = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = c + sig;  
              CUP$parser$result = new java_cup.runtime.Symbol(2/*cadena_s*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // factor ::= funcionCall 
            {
              Objeto RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Tipo f = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new Objeto(f); 
              CUP$parser$result = new java_cup.runtime.Symbol(51/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // factor ::= cadena_s 
            {
              Objeto RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 Objeto t = new Objeto(parser.seen_types.get("string")); 
                      String fin = "";
                      for(char c:s.toCharArray()){
                        if( c != '"')
                           fin += c;
                      }
                    t.SizeChain= fin.length();
                      RESULT = t;
                      RESULT.setLugar(fin); 
              CUP$parser$result = new java_cup.runtime.Symbol(51/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // factor ::= FALSE 
            {
              Objeto RESULT = null;
		 RESULT= new Objeto(parser.seen_types.get("boolean"));
                   RESULT.setLugar("false");
                 
              CUP$parser$result = new java_cup.runtime.Symbol(51/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // factor ::= TRUE 
            {
              Objeto RESULT = null;
		 RESULT=  new Objeto(parser.seen_types.get("boolean")); 
                  RESULT.setLugar("true");
                
              CUP$parser$result = new java_cup.runtime.Symbol(51/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // factor ::= MENOS factor 
            {
              Objeto RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Objeto f = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = f;
                            String tmpLugar = f.getLugar();
                            if(!parser.first_time){ 
                                RESULT.setLugar(parser.IMips.nuevaTemp());
                                parser.IMips.gen("NEG",tmpLugar,"",RESULT.getLugar());
                            }
                         
              CUP$parser$result = new java_cup.runtime.Symbol(51/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // factor ::= nombre 
            {
              Objeto RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Objeto n = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = n; 
                      if (!parser.first_time && n.error_msg != null){
                        parser.report_semantic_error(n.error_msg,n.line,n.column);
                      }
                      if(!parser.first_time){
                          if(n.offset == -1)
                            RESULT.setLugar(n.id);
                          else{
                            String nuev = parser.IMips.nuevaTemp();
                            parser.IMips.gen("GET_OFFSET",n.id,n.offset,nuev);
                            RESULT.setLugar(nuev);
                          }
                      }
                  
              CUP$parser$result = new java_cup.runtime.Symbol(51/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // factor ::= NUM 
            {
              Objeto RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Objeto(parser.seen_types.get("integer"));
                   RESULT.setLugar(n.toString());
              CUP$parser$result = new java_cup.runtime.Symbol(51/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // factor ::= NOT factor 
            {
              Objeto RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Objeto f1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                            int linea = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).left;
                            int columna = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).right;
                            
                            if(!parser.first_time){ 
                              if( f1.t.getName().equals("variant" ) && f1.TipoExtraVariant.getName().equals("boolean")){  
                                RESULT = new Objeto(parser.seen_types.get("boolean"));
                                RESULT.setLugar(parser.IMips.nuevaTemp());
                                parser.IMips.gen("NOT",f1.getLugar(),"",RESULT.getLugar());
                               
                              }
                              else if(!f1.t.getName().equals("boolean")  ) 
                                  parser.report_semantic_error("Tipo no booleano en expresion",linea,columna);
                              
                              RESULT = new Objeto(parser.seen_types.get("boolean"));  
                              RESULT.setLugar(parser.IMips.nuevaTemp());
                              parser.IMips.gen("NOT",f1.getLugar(),"",RESULT.getLugar());
                            

                            }
                            else{
                                RESULT = f1;    
                            }
                        
              CUP$parser$result = new java_cup.runtime.Symbol(51/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // factor ::= PARDER expression PARIZQ 
            {
              Objeto RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(51/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // termino ::= factor 
            {
              Objeto RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Objeto f = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = f; 
              CUP$parser$result = new java_cup.runtime.Symbol(50/*termino*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // termino ::= factor OPREL termino 
            {
              Objeto RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto f = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Objeto t = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                int linea = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).left;
                int columna = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).right;
                ArrayList<String> numericos = new ArrayList<String>();
                ArrayList<String> comparison = new ArrayList<String>();
                numericos.add(">="); numericos.add("<="); numericos.add("<"); numericos.add(">"); numericos.add("<>");
                comparison.add("and"); comparison.add("or"); comparison.add("xor"); 
                if(!parser.first_time){
                 if(numericos.contains(op)){ 
                  if(f.t.getName().equals(t.t.getName()) && f.t.getName().equals("integer") ){
                    RESULT = new Objeto(parser.seen_types.get("boolean")); 
                    RESULT.setLugar(parser.IMips.nuevaTemp());
                    parser.IMips.gen(op,f.getLugar(),t.getLugar(),RESULT.getLugar());
                  }
                  else if( f.t.getName().equals(t.t.getName()) && f.t.getName().equals("variant") 
                            && f.TipoExtraVariant.getName().equals(t.TipoExtraVariant.getName()) 
                            && f.TipoExtraVariant.getName().equals("integer") ){
                        RESULT = new Objeto(parser.seen_types.get("boolean"));
                    RESULT.setLugar(parser.IMips.nuevaTemp());
                    parser.IMips.gen(op,f.getLugar(),t.getLugar(),RESULT.getLugar());
                  }
                  else if( f.t.getName().equals("variant") && f.TipoExtraVariant.getName().equals("integer")  && t.t.getName().equals("integer")){
                        RESULT = new Objeto(parser.seen_types.get("boolean"));
                    RESULT.setLugar(parser.IMips.nuevaTemp());
                    parser.IMips.gen(op,f.getLugar(),t.getLugar(),RESULT.getLugar());
                  }
                  else if( t.t.getName().equals("variant") && t.TipoExtraVariant.getName().equals("integer")  && f.t.getName().equals("integer")){
                        RESULT = new Objeto(parser.seen_types.get("boolean"));
                    RESULT.setLugar(parser.IMips.nuevaTemp());
                    parser.IMips.gen(op,f.getLugar(),t.getLugar(),RESULT.getLugar());
                  }
  
                  else{

                    parser.report_semantic_error(" No se puede comparar " + f.t.getName() + " con " + t.t.getName(),linea,columna);
                    RESULT = new Objeto(parser.seen_types.get("boolean"));
                    RESULT.setLugar(parser.IMips.nuevaTemp());
                    parser.IMips.gen(op,f.getLugar(),t.getLugar(),RESULT.getLugar());
                  }
                }
                 if(comparison.contains(op)){ 
                  if(f.t.getName().equals(t.t.getName()) && f.t.getName().equals("boolean") ){
                    RESULT = new Objeto(parser.seen_types.get("boolean")); 
                    RESULT.setLugar(parser.IMips.nuevaTemp());
                    parser.IMips.gen(op,f.getLugar(),t.getLugar(),RESULT.getLugar());
                  }
                  else if( f.t.getName().equals(t.t.getName()) && f.t.getName().equals("variant") 
                            && f.TipoExtraVariant.getName().equals(t.TipoExtraVariant.getName()) 
                            && f.TipoExtraVariant.getName().equals("boolean") ){
                        RESULT = new Objeto(parser.seen_types.get("boolean"));
                    RESULT.setLugar(parser.IMips.nuevaTemp());
                    parser.IMips.gen(op,f.getLugar(),t.getLugar(),RESULT.getLugar());
                  }
                  else if( f.t.getName().equals("variant") && f.TipoExtraVariant.getName().equals("boolean")  && t.t.getName().equals("boolean")){
                        RESULT = new Objeto(parser.seen_types.get("boolean"));
                    RESULT.setLugar(parser.IMips.nuevaTemp());
                    parser.IMips.gen(op,f.getLugar(),t.getLugar(),RESULT.getLugar());
                  }
                  else if( t.t.getName().equals("variant") && t.TipoExtraVariant.getName().equals("boolean")  && f.t.getName().equals("boolean")){
                        RESULT = new Objeto(parser.seen_types.get("boolean"));
                    RESULT.setLugar(parser.IMips.nuevaTemp());
                    parser.IMips.gen(op,f.getLugar(),t.getLugar(),RESULT.getLugar());
                  }
  
                  else{

                    parser.report_semantic_error(" No se puede comparar " + f.t.getName() + " con " + t.t.getName(),linea,columna);
                    RESULT = new Objeto(parser.seen_types.get("boolean"));
                    RESULT.setLugar(parser.IMips.nuevaTemp());
                    parser.IMips.gen(op,f.getLugar(),t.getLugar(),RESULT.getLugar());
                  }
                }


                }
              
              CUP$parser$result = new java_cup.runtime.Symbol(50/*termino*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // termino ::= factor ENTRE termino 
            {
              Objeto RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto f = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Objeto t = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                int linea = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).left;
                int columna = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).right;
                
                if(!parser.first_time){
                  if(f.t.getName().equals(t.t.getName()) && f.t.getName().equals("integer") ){
                    RESULT = new Objeto(parser.seen_types.get("integer"));
                    RESULT.setLugar(parser.IMips.nuevaTemp());
                    parser.IMips.gen("/",f.getLugar(),t.getLugar(),RESULT.getLugar());
                  
                  }
                  else if( f.t.getName().equals(t.t.getName()) && f.t.getName().equals("variant") 
                            && f.TipoExtraVariant.getName().equals(t.TipoExtraVariant.getName()) 
                            && f.TipoExtraVariant.getName().equals("integer") ){
                        RESULT = new Objeto(parser.seen_types.get("integer"));
                        RESULT.setLugar(parser.IMips.nuevaTemp());
                        parser.IMips.gen("/",f.getLugar(),t.getLugar(),RESULT.getLugar());


                  }
                  else if( f.t.getName().equals("variant") && f.TipoExtraVariant.getName().equals("integer")  && t.t.getName().equals("integer")){
                        RESULT = new Objeto(parser.seen_types.get("integer"));
                        RESULT.setLugar(parser.IMips.nuevaTemp());
                        parser.IMips.gen("/",f.getLugar(),t.getLugar(),RESULT.getLugar());    
              }
                  else if( t.t.getName().equals("variant") && t.TipoExtraVariant.getName().equals("integer")  && f.t.getName().equals("integer")){
                        RESULT = new Objeto(parser.seen_types.get("integer"));
                        RESULT.setLugar(parser.IMips.nuevaTemp());
                        parser.IMips.gen("/",f.getLugar(),t.getLugar(),RESULT.getLugar());
  
                  }
  
                  else{

                    parser.report_semantic_error(" No se puede dividir " + f.t.getName() + " con " + t.t.getName(),linea,columna);
                    RESULT = new Objeto(parser.seen_types.get("integer"));
                    RESULT.setLugar(parser.IMips.nuevaTemp());
                    parser.IMips.gen("*",f.getLugar(),t.getLugar(),RESULT.getLugar());
                  }
                }
              
              CUP$parser$result = new java_cup.runtime.Symbol(50/*termino*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // termino ::= factor POR termino 
            {
              Objeto RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto f = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Objeto t = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                int linea = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).left;
                int columna = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).right;
                
                if(!parser.first_time){
                  if(f.t.getName().equals(t.t.getName()) && f.t.getName().equals("integer") ){
                    RESULT = new Objeto(parser.seen_types.get("integer"));
                    RESULT.setLugar(parser.IMips.nuevaTemp());
                    parser.IMips.gen("*",f.getLugar(),t.getLugar(),RESULT.getLugar());
                  }
                  else if( f.t.getName().equals(t.t.getName()) && f.t.getName().equals("variant") 
                            && f.TipoExtraVariant.getName().equals(t.TipoExtraVariant.getName()) 
                            && f.TipoExtraVariant.getName().equals("integer") ){
                        RESULT = new Objeto(parser.seen_types.get("integer"));
                        RESULT.setLugar(parser.IMips.nuevaTemp());
                        parser.IMips.gen("*",f.getLugar(),t.getLugar(),RESULT.getLugar());
              }
                  else if( f.t.getName().equals("variant") && f.TipoExtraVariant.getName().equals("integer")  && t.t.getName().equals("integer")){
                        RESULT = new Objeto(parser.seen_types.get("integer"));
                        RESULT.setLugar(parser.IMips.nuevaTemp());
                        parser.IMips.gen("*",f.getLugar(),t.getLugar(),RESULT.getLugar());
                  }
                  else if( t.t.getName().equals("variant") && t.TipoExtraVariant.getName().equals("integer")  && f.t.getName().equals("integer")){
                        RESULT = new Objeto(parser.seen_types.get("integer"));
                        RESULT.setLugar(parser.IMips.nuevaTemp());
                        parser.IMips.gen("*",f.getLugar(),t.getLugar(),RESULT.getLugar());
                  }
  
                  else{

                    parser.report_semantic_error(" No se puede multiplicar " + f.t.getName() + " con " + t.t.getName(),linea,columna);
                    RESULT = new Objeto(parser.seen_types.get("integer"));
                    RESULT.setLugar(parser.IMips.nuevaTemp());
                    parser.IMips.gen("*",f.getLugar(),t.getLugar(),RESULT.getLugar());
                  }
                }
              
              CUP$parser$result = new java_cup.runtime.Symbol(50/*termino*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expression ::= expression IGUAL termino 
            {
              Objeto RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Objeto t = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Objeto(parser.seen_types.get("boolean"));
                                            if(!parser.first_time){
                                                RESULT.setLugar(parser.IMips.nuevaTemp());
                                                parser.IMips.gen("-",e.getLugar(),t.getLugar(),RESULT.getLugar());
                                          }
                                        
              CUP$parser$result = new java_cup.runtime.Symbol(52/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expression ::= termino 
            {
              Objeto RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Objeto t = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = t; 
              CUP$parser$result = new java_cup.runtime.Symbol(52/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expression ::= expression MENOS termino 
            {
              Objeto RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Objeto t = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                int linea = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).left;
                int columna = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).right;
                
                if(!parser.first_time){
                  if(e.t.getName().equals(t.t.getName()) && e.t.getName().equals("integer") ){
                    RESULT = new Objeto(parser.seen_types.get("integer"));
                    RESULT.setLugar(parser.IMips.nuevaTemp());
                    parser.IMips.gen("-",e.getLugar(),t.getLugar(),RESULT.getLugar());
                  
                  }
                  else if( e.t.getName().equals(t.t.getName()) && e.t.getName().equals("variant") 
                            && e.TipoExtraVariant.getName().equals(t.TipoExtraVariant.getName()) 
                            && e.TipoExtraVariant.getName().equals("integer") ){
                        RESULT = new Objeto(parser.seen_types.get("integer"));
                        RESULT.setLugar(parser.IMips.nuevaTemp());
                        parser.IMips.gen("-",e.getLugar(),t.getLugar(),RESULT.getLugar());
                  }
                  else if( e.t.getName().equals("variant") && e.TipoExtraVariant.getName().equals("integer")  && t.t.getName().equals("integer")){
                        RESULT = new Objeto(parser.seen_types.get("integer"));
                    RESULT.setLugar(parser.IMips.nuevaTemp());
                    parser.IMips.gen("-",e.getLugar(),t.getLugar(),RESULT.getLugar());
                  }
                  else if( t.t.getName().equals("variant") && t.TipoExtraVariant.getName().equals("integer")  && e.t.getName().equals("integer")){
                        RESULT = new Objeto(parser.seen_types.get("integer"));
                    RESULT.setLugar(parser.IMips.nuevaTemp());
                    parser.IMips.gen("-",e.getLugar(),t.getLugar(),RESULT.getLugar());
                  }
  
                  else{

                    parser.report_semantic_error(" No se puede restar " + e.t.getName() + " con " + t.t.getName(),linea,columna);
                    RESULT = new Objeto(parser.seen_types.get("integer"));
                    RESULT.setLugar(parser.IMips.nuevaTemp());
                    parser.IMips.gen("-",e.getLugar(),t.getLugar(),RESULT.getLugar());
                  }
                }
              
              CUP$parser$result = new java_cup.runtime.Symbol(52/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expression ::= expression MAS termino 
            {
              Objeto RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Objeto t = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                int linea = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).left;
                int columna = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).right;
                
                if(!parser.first_time){
                  if(e.t.getName().equals(t.t.getName()) && e.t.getName().equals("integer") ){
                    RESULT = new Objeto(parser.seen_types.get("integer"));
                    RESULT.setLugar(parser.IMips.nuevaTemp());
                    parser.IMips.gen("+",e.getLugar(),t.getLugar(),RESULT.getLugar());
                  }
                  else if( e.t.getName().equals(t.t.getName()) && e.t.getName().equals("variant") 
                            && e.TipoExtraVariant.getName().equals(t.TipoExtraVariant.getName()) 
                            && e.TipoExtraVariant.getName().equals("integer") ){
                        RESULT = new Objeto(parser.seen_types.get("integer"));
                    RESULT.setLugar(parser.IMips.nuevaTemp());
                    parser.IMips.gen("+",e.getLugar(),t.getLugar(),RESULT.getLugar());
                  }
                  else if( e.t.getName().equals("variant") && e.TipoExtraVariant.getName().equals("integer")  && t.t.getName().equals("integer")){
                        RESULT = new Objeto(parser.seen_types.get("integer"));
                    RESULT.setLugar(parser.IMips.nuevaTemp());
                    parser.IMips.gen("+",e.getLugar(),t.getLugar(),RESULT.getLugar());
                  }
                  else if( t.t.getName().equals("variant") && t.TipoExtraVariant.getName().equals("integer")  && e.t.getName().equals("integer")){
                        RESULT = new Objeto(parser.seen_types.get("integer"));
                    RESULT.setLugar(parser.IMips.nuevaTemp());
                    parser.IMips.gen("+",e.getLugar(),t.getLugar(),RESULT.getLugar());
                  }
  
                  else{

                    parser.report_semantic_error(" No se puede sumar " + e.t.getName() + " con " + t.t.getName(),linea,columna);
                    RESULT = new Objeto(parser.seen_types.get("integer"));
                    RESULT.setLugar(parser.IMips.nuevaTemp());
                    parser.IMips.gen("+",e.getLugar(),t.getLugar(),RESULT.getLugar());
                  }
                }
              
              CUP$parser$result = new java_cup.runtime.Symbol(52/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // nombre ::= NAME PUNTO error 
            {
              Objeto RESULT = null;
		 if (!parser.first_time) parser.report_error(" Error de <id> en asignacion ",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(53/*nombre*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // nombre ::= NAME PUNTO NAME 
            {
              Objeto RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                      int linea = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).left;
                      int columna = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).right;
                      if(!parser.first_time){
                        Tipo tmp = parser.ambito.BuscarEnTabla(n1);
                         if( tmp.getName().equals("error")){
                              parser.report_semantic_error("Variable " + n1 + " no fue declarada/con punto" , linea,columna);
                              RESULT =  new Objeto(parser.seen_types.get("error"));
                              RESULT.setLugar(n1);
                              RESULT.offset = -1;
                              RESULT.id = n1;
                        }
                        else{
                            String nombre = tmp.getName();
                            tmp = parser.seen_types.get(tmp.getName()).atributos.get(n2);
                            if( tmp == null){
                                parser.report_semantic_error(n1 + " no cuenta con atributo " + n2,linea,columna);
                                RESULT = new Objeto(parser.seen_types.get("error"));
                                RESULT.id = n1;
                                RESULT.setLugar(n1);
                                RESULT.offset = -1;
                            }
                            else{
                                RESULT = new Objeto(tmp);
                                RESULT.id = n1;
                                RESULT.setLugar(n1);
                                RESULT.offset = parser.seen_types.get(nombre).atributos_pos.get(n2);                           
                            }
                          }              
                        
                        }
                    
              CUP$parser$result = new java_cup.runtime.Symbol(53/*nombre*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // nombre ::= NAME 
            {
              Objeto RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                    int linea = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).left;
                    int columna = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).right;
                    if(!parser.first_time){
                      Tipo tmp = parser.ambito.BuscarEnTabla(n1);
                      RESULT = new Objeto(tmp);
                      
                      if( tmp.getName().equals("error"))
                      {   RESULT.error_msg = "Variable " + n1 + " no fue declarada"; 
                          RESULT.line = linea;
                          RESULT.column = columna;
                      }
                       RESULT.id = n1;
                      RESULT.TipoExtraVariant = parser.ambito.BuscarExtraTipo(n1);
                      } 
                    
              CUP$parser$result = new java_cup.runtime.Symbol(53/*nombre*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // asignacion ::= nombre IGUAL error fin 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("No se puede asignar valor, error en expresion ",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*asignacion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // asignacion ::= nombre IGUAL NT$3 expression fin 
            {
              Object RESULT = null;
              // propagate RESULT from NT$3
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Objeto n = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
            
            if(!parser.first_time)
            {
              if( n.offset == -1) 
                parser.IMips.gen("ASIG",e.getLugar(),"",n.id); 
              else
                parser.IMips.gen("ASIG_OFFSET",e.getLugar(),String.valueOf(n.offset),n.id);
             
               if(!n.t.getName().equals(e.t.getName()) && !n.t.getName().equals("variant") )
              {
                

                if( e.t.getName().equals("variant") && e.TipoExtraVariant.getName().equals( n.t.getName() ) ){
                
                }
                else if(!( n.t.getName().equals("char") && e.t.getName().equals("string") && e.SizeChain <= 1)){
                  int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).left;
                  int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).right;
                  parser.report_semantic_error("No se puede asignar " +  e.t.getName() + " a variable de tipo " + n.t.getName(),left,right);       
                               
                }      
                                
              }
              else if( n.t.getName().equals("variant") && !e.t.getName().equals("error")){
                  int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).left;
                  int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).right;
                    if (e.t.getName().equals("void")){
                        parser.report_semantic_error("No se puede asignar tipo void",left,right);
                    }
                    else parser.ambito.CambiarExtraTipo(n.id,e.t); 
                }
               
            }
              
              CUP$parser$result = new java_cup.runtime.Symbol(18/*asignacion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$3 ::= 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto n = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                      
                  if(!parser.first_time && n.error_msg != null){
                      parser.ambito.agregarATabla(n.id.toLowerCase(),parser.seen_types.get("variant"));
                      n.t = parser.seen_types.get("variant");  
                }

            
              CUP$parser$result = new java_cup.runtime.Symbol(57/*NT$3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // lee ::= INPUT error 
            {
              Objeto RESULT = null;
		 if (!parser.first_time) parser.report_error(" Se esperaba variable",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*lee*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // lee ::= INPUT nombre NT$2 fin 
            {
              Objeto RESULT = null;
              // propagate RESULT from NT$2
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Objeto) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto n = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(48/*lee*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$2 ::= 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Objeto n = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;


                      if (!parser.first_time && n.error_msg != null){
                        parser.report_semantic_error(n.error_msg,n.line,n.column);
                      }
                      else if (!parser.first_time){
                          if(n.t.getName().equals("variant")){
                             if( !( n.TipoExtraVariant.getName().equals("char") || n.TipoExtraVariant.getName().equals("string") || n.TipoExtraVariant.getName().equals("integer")  ) ){
                             int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).left;
                             int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).right;
                             parser.report_semantic_error("Variable debe ser <string|char|integer> para ser leida",left,right); 
                          }

                        
                          }
                          else if( !( n.t.getName().equals("char") || n.t.getName().equals("string") || n.t.getName().equals("integer")  ) ){
                             int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).left;
                             int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).right;
                             parser.report_semantic_error("Variable debe ser <string|char|integer> para ser leida",left,right); 
                          }
                      }
       
              CUP$parser$result = new java_cup.runtime.Symbol(56/*NT$2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // escribe ::= WRITELN error 
            {
              Objeto RESULT = null;
		 if (!parser.first_time) parser.report_error("Se esperaba cadena o variable",sym.WRITELN); 
              CUP$parser$result = new java_cup.runtime.Symbol(49/*escribe*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // escribe ::= WRITELN cadena_s fin 
            {
              Objeto RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(49/*escribe*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // escribe ::= WRITELN nombre NT$1 fin 
            {
              Objeto RESULT = null;
              // propagate RESULT from NT$1
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Objeto) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto n = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(49/*escribe*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$1 ::= 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Objeto n = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                      if (!parser.first_time && n.error_msg != null){
                        parser.report_semantic_error(n.error_msg,n.line,n.column);
                      }
                      else if (!parser.first_time){
                          if(n.t.getName().equals("variant")){
                             if( !( n.TipoExtraVariant.getName().equals("char") || n.TipoExtraVariant.getName().equals("string") || n.TipoExtraVariant.getName().equals("integer")  ) ){
                             int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).left;
                             int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).right;
                             parser.report_semantic_error("Variable debe ser <string|char|integer> para ser escrita",left,right); 
                          }

                        
                          }
                          else if( !( n.t.getName().equals("char") || n.t.getName().equals("string") || n.t.getName().equals("integer")  ) ){
                             int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).left;
                             int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).right;
                             parser.report_semantic_error("Variable debe ser <string|char|integer> para ser escrita",left,right); 
                          }
                      }
            
              CUP$parser$result = new java_cup.runtime.Symbol(55/*NT$1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // escribe ::= WRITE error 
            {
              Objeto RESULT = null;
		 if (!parser.first_time) parser.report_error("Se esperaba cadena o variable",sym.WRITE);
              CUP$parser$result = new java_cup.runtime.Symbol(49/*escribe*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // escribe ::= WRITE nombre NT$0 fin 
            {
              Objeto RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Objeto) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto n = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(49/*escribe*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$0 ::= 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Objeto n = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
 
                      if (!parser.first_time && n.error_msg != null){
                        parser.report_semantic_error(n.error_msg,n.line,n.column);
                      }
                      else if (!parser.first_time){
                          if(n.t.getName().equals("variant")){
                             if( !( n.TipoExtraVariant.getName().equals("char") || n.TipoExtraVariant.getName().equals("string") || n.TipoExtraVariant.getName().equals("integer")  ) ){
                             int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).left;
                             int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).right;
                             parser.report_semantic_error("Variable debe ser <string|char|integer> para ser escrita",left,right); 
                          }

                        
                          }
                          else if( !( n.t.getName().equals("char") || n.t.getName().equals("string") || n.t.getName().equals("integer")  ) ){
                             int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).left;
                             int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).right;
                             parser.report_semantic_error("Variable debe ser <string|char|integer> para ser escrita",left,right); 
                          }
                      }
             
              CUP$parser$result = new java_cup.runtime.Symbol(54/*NT$0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // escribe ::= WRITE cadena_s fin 
            {
              Objeto RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(49/*escribe*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // statement ::= NAME error 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error(" Expresion no se esperaba.",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // statement ::= RETURN expression fin 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(!parser.first_time){
                                int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).left;
                                int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).right;
                                Tipo tmp = parser.seen_types.get(parser.ambito.ambito); 

                                if (tmp.getTipoFinal() == 2)
                                  parser.report_semantic_error("Procedimiento " + parser.ambito.ambito + " debe tener retorno vacio " ,left,right);
                                if (tmp.getTipoFinal() == 1){
                                    String ret = tmp.metodo_var.get( tmp.metodo_var.size() -1).getName();
                                      
                                    if( !e.t.getName().equals("variant") && !e.t.getName().equals(ret))
                                        parser.report_semantic_error("Funcion " + parser.ambito.ambito + " debe tener retorno " + ret +
                                                "recibe " + e.t.getName() ,left,right);
                                  
                                    if( e.t.getName().equals("variant")){
                                          if(!e.TipoExtraVariant.getName().equals(ret))
                                            parser.report_semantic_error("Funcion " + parser.ambito.ambito + " debe tener retorno " + ret +
                                                      " recibe " + e.TipoExtraVariant.getName() ,left,right);
                                        }    
                                    }
                                      

                                }
              CUP$parser$result = new java_cup.runtime.Symbol(7/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // statement ::= RETURN fin 
            {
              Object RESULT = null;
		 if(!parser.first_time){  
                                int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).left;
                                int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).right;
                                Tipo tmp = parser.seen_types.get(parser.ambito.ambito); 
                                if (tmp.getTipoFinal() != 2)
                                  parser.report_semantic_error("Metodo " + parser.ambito.ambito + " debe tener retorno no vacio " ,left,right);
                           }
              CUP$parser$result = new java_cup.runtime.Symbol(7/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // statement ::= lee 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // statement ::= escribe 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // statement ::= funcionCall fin 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // statement ::= asignacion 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // statement ::= do_loop 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // statement ::= loop_for 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // statement ::= if_block 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // list_expressions ::= statement 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*list_expressions*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // list_expressions ::= statement list_expressions 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*list_expressions*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // list_declar ::= variables_declar 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*list_declar*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // list_declar ::= variables_declar list_declar 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*list_declar*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // bloque ::= regresar 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(25/*bloque*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // bloque ::= list_declar regresar 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(25/*bloque*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // bloque ::= list_declar 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(25/*bloque*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // bloque ::= list_declar list_expressions regresar 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(25/*bloque*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // bloque ::= list_declar list_expressions 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(25/*bloque*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // bloque ::= list_expressions regresar 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(25/*bloque*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // bloque ::= list_expressions 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(25/*bloque*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // regresar ::= EXIT error 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error(" Salida de metodos: se esperaba Exit Sub o Exit Function",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(35/*regresar*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // regresar ::= EXIT FUNCTION fin 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(35/*regresar*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // regresar ::= EXIT SUB fin 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(35/*regresar*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // end_type ::= END error 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Se esperaba End Type",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*end_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // end_type ::= END TYPE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(34/*end_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // end_func ::= bloque END error 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error(" Se esperaba End Function", sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*end_func*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // end_func ::= END FUNCTION 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(33/*end_func*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // end_func ::= bloque END FUNCTION 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(33/*end_func*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // end_sub ::= END error 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error(" Se esperaba End Sub",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(39/*end_sub*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // end_sub ::= END SUB 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(39/*end_sub*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // end_sub ::= bloque END SUB 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(39/*end_sub*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // retorno ::= AS error 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error(" Tipo de retorno invalido de funcion, se esperaba: As <char|integer|string|boolean>",sym.AS); 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*retorno*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // retorno ::= error 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error(" No existe tipo de retorno de funcion, se esperaba: As <Tipo>",sym.AS); 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*retorno*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // retorno ::= AS TIPO 
            {
              Object RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  
                            if(parser.first_time){parser.tmp_tipo.metodo_var.add(parser.seen_types.get(t1)); 
                                  parser.seen_types.put( parser.tmp_tipo.getName(), parser.tmp_tipo);
                            }
                            else{
                                      Tipo x = parser.seen_types.get(t1.toLowerCase());
                                      parser.ambito.agregarATabla(parser.ambito.ambito, x  );
                                      
                            }
                        
              CUP$parser$result = new java_cup.runtime.Symbol(31/*retorno*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // fake_s ::= NAME 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                      if(parser.first_time){
                      tabla nuevo_ambito = new tabla(parser.ambito,n1); 
                      parser.ambito.hijos.add(nuevo_ambito);
                      parser.ambito = nuevo_ambito;
                      parser.tmp_tipo = new Tipo(n1);
                      parser.tmp_tipo.setTipoFinal(2);
                      if (n1.toLowerCase().equals("main")) parser.has_main = true; 
                                }
                      else{
                          parser.IMips.gen("ETIQ","func_" + n1,"","");
                          for(tabla t:parser.ambito.hijos)
                           {
                                if( t.ambito.equals(n1))
                                {  parser.ambito = t; 
                                    break;}
                           }
                       }


                     
              CUP$parser$result = new java_cup.runtime.Symbol(45/*fake_s*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // fake_f ::= NAME 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		                       
                      if(parser.first_time){ 
                         tabla nuevo_ambito = new tabla(parser.ambito,n1);
                         parser.ambito.hijos.add(nuevo_ambito);
                         parser.ambito = nuevo_ambito;
                         parser.tmp_tipo = new Tipo(n1);
                         parser.tmp_tipo.setTipoFinal(1);
                      }
                      else{
                        parser.IMips.gen("ETIQ","func_" + n1 ,"","");      
                        for(tabla t:parser.ambito.hijos)
                           {
                                if( t.ambito.equals(n1))
                                {  parser.ambito = t; 
                                    break;}
                           }
                       }
                    
              CUP$parser$result = new java_cup.runtime.Symbol(44/*fake_f*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // funcion ::= FUNCTION fake_f error 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Error en firma de funcion",sym.ERROR); 
                                                    parser.ambito = parser.ambito.parent;  
                                                    if(!parser.first_time) parser.IMips.gen("RET","","","");        
              CUP$parser$result = new java_cup.runtime.Symbol(43/*funcion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // funcion ::= FUNCTION fake_f error fin end_func fin 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("error de parametros",sym.ERROR);
                                                      parser.ambito = parser.ambito.parent; 
                                                      if(!parser.first_time) parser.IMips.gen("RET","","","");    
                                        
              CUP$parser$result = new java_cup.runtime.Symbol(43/*funcion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // funcion ::= FUNCTION fake_f error PARIZQ retorno fin end_func fin 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("error de parametros",sym.ERROR); 
                                                                     parser.ambito = parser.ambito.parent;
                                                                     if(!parser.first_time) parser.IMips.gen("RET","","","");    
                                                                  
              CUP$parser$result = new java_cup.runtime.Symbol(43/*funcion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // funcion ::= FUNCTION error fin 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Se esperaba nombre de funcion",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(43/*funcion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // funcion ::= FUNCTION fake_f argumentlist retorno fin error fin 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Error en el bloque de funcion",sym.ERROR); 
                                                                      parser.ambito = parser.ambito.parent;
                                                                      if(!parser.first_time) parser.IMips.gen("RET","","","");    
                                                                  
              CUP$parser$result = new java_cup.runtime.Symbol(43/*funcion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // funcion ::= FUNCTION fake_f argumentlist retorno fin end_func fin 
            {
              Object RESULT = null;
		 parser.ambito = parser.ambito.parent; 
                                                                       if(!parser.first_time) parser.IMips.gen("RET","","","");    
                                                                     
              CUP$parser$result = new java_cup.runtime.Symbol(43/*funcion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // fake_end_sub ::= 
            {
              Object RESULT = null;
		  
                            if(parser.first_time){parser.tmp_tipo.metodo_var.add(parser.seen_types.get("void")); 
                                  parser.seen_types.put( parser.tmp_tipo.getName(), parser.tmp_tipo);
                            }
                            else{
                                      Tipo x = parser.seen_types.get("void");
                                      parser.ambito.agregarATabla(parser.ambito.ambito, x   );
                            }
                   
              CUP$parser$result = new java_cup.runtime.Symbol(6/*fake_end_sub*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // subfunc ::= SUB fake_s error 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Error en firma de procedimiento",sym.ERROR); 
                                                    parser.ambito = parser.ambito.parent;  
                                                    if(!parser.first_time) parser.IMips.gen("RET","","","");        
              CUP$parser$result = new java_cup.runtime.Symbol(42/*subfunc*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // subfunc ::= SUB fake_s error fin end_func fin 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("error de parametros",sym.ERROR);
                                                      parser.ambito = parser.ambito.parent; 
                                                      if(!parser.first_time) parser.IMips.gen("RET","","","");    
                                        
              CUP$parser$result = new java_cup.runtime.Symbol(42/*subfunc*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // subfunc ::= SUB fake_s error PARIZQ retorno fin end_func fin 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("error de parametros",sym.ERROR); 
                                                                     parser.ambito = parser.ambito.parent;
                                                                     if(!parser.first_time) parser.IMips.gen("RET","","","");    
                                                                  
              CUP$parser$result = new java_cup.runtime.Symbol(42/*subfunc*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // subfunc ::= SUB error fin 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Se esperaba nombre de funcion",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(42/*subfunc*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // subfunc ::= SUB fake_s argumentlist fin error fin 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Error en el bloque de procedimiento",sym.ERROR); 
                                                                      parser.ambito = parser.ambito.parent;
                                                                      if(!parser.first_time) parser.IMips.gen("RET","","","");    
                                                                  
              CUP$parser$result = new java_cup.runtime.Symbol(42/*subfunc*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // subfunc ::= SUB fake_s argumentlist fin fake_end_sub end_sub fin 
            {
              Object RESULT = null;
		 parser.ambito = parser.ambito.parent;
                                                    if(!parser.first_time) parser.IMips.gen("RET","","","");    
           
              CUP$parser$result = new java_cup.runtime.Symbol(42/*subfunc*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // metodo ::= funcion 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*metodo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // metodo ::= subfunc 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*metodo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipo ::= NAME 
            {
              Tipo RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                   Tipo x = parser.seen_types.get(n1.toLowerCase());
                    if( x ==null)
                    {
                      x = new Tipo(n1.toLowerCase());
                    }
                    RESULT = x;   
              CUP$parser$result = new java_cup.runtime.Symbol(3/*tipo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipo ::= TIPO 
            {
              Tipo RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                     Tipo x = parser.seen_types.get(n1.toLowerCase());
                    RESULT = x;
                  
              CUP$parser$result = new java_cup.runtime.Symbol(3/*tipo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // vars ::= NAME SEPARADOR error 
            {
              String RESULT = null;
		
              int columna = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).right;
              int linea = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).left;
             if(!parser.first_time) parser.report_semantic_error("Declaracion de variables: Se esperaba nombre",linea,columna); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*vars*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // vars ::= NAME SEPARADOR vars 
            {
              String RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
              int columna = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).right;
              int linea = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).left;
          if ( parser.first_time ){ 
                  boolean meter =  parser.ambito.agregarATabla(n1.toLowerCase(),parser.seen_types.get("variant") ); 
                  if(!meter ) parser.report_semantic_error("Variable <" + n1 +  "> ya ha sido declarada en este contexto",linea,columna);
                  }
              RESULT = n2.toLowerCase(); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*vars*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // vars ::= NAME 
            {
              String RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = n1.toLowerCase() ; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*vars*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaracion ::= error 
            {
              Object RESULT = null;
		 if(!parser.first_time) parser.report_error("Declaracion de variables: Se esperaba ID",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*declaracion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaracion ::= vars AS tipo 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  
                      int linea = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).left;
                      int columna = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).right;


                      if (parser.first_time && !parser.in_method ){
                            if( t.getName().equals("void"))
                                parser.report_semantic_error("Variable <" + n1 +  "> no se puede declarar tipo void",linea,columna);
                              else{
                            boolean meter = parser.ambito.agregarATabla(n1,t); 
                            if(!meter ) parser.report_semantic_error("Variable <" + n1 +  "> ya ha sido declarada en este contexto",linea,columna);
                          }
                        }
                        if ( !parser.first_time && !parser.in_method ){
                            Tipo tmp = parser.ambito.BuscarEnTabla(n1);
                            Tipo extra = parser.seen_types.get(tmp.getName());
                            if(extra== null )
                            {  parser.report_semantic_error(" No existe tipo " + t.getName() + " en la declaracion de variable " + n1,linea,columna); }
                        } 
                        if ( !parser.first_time && parser.in_method ){
                            if( parser.seen_types.get(t.getName()) == null){
                                parser.report_semantic_error("No existe el tipo" + t.getName() + " en la declaracion de la variable" + n1, linea,columna);
                            }
                            else{
                                boolean meter = parser.ambito.agregarATabla(n1,t );
                                if(!meter ) parser.report_semantic_error("Variable <" + n1 +  "> ya ha sido declarada en este contexto",linea,columna);
                              }   
                        }
            
              CUP$parser$result = new java_cup.runtime.Symbol(11/*declaracion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracion ::= vars AS tipo SEPARADOR declaracion 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  
                        //meter las variables globales dentro de la tabla
                        int linea = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).left;
                        int columna = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).right;
                        
                        if ( parser.first_time && !parser.in_method ){ 
                            if( t.getName().equals("void"))
                                parser.report_semantic_error("Variable <" + n1 +  "> no se puede declarar tipo void",linea,columna);
                              else{
                            boolean meter = parser.ambito.agregarATabla(n1,t ); 
                            if(!meter ) parser.report_semantic_error("Variable <" + n1 +  "> ya ha sido declarada en este contexto",linea,columna);
                            }
                        }
                        
                        if ( !parser.first_time && !parser.in_method ){
                            Tipo tmp = parser.ambito.BuscarEnTabla(n1);
                            Tipo extra = parser.seen_types.get(tmp.getName());
                            if(extra== null )
                            {  parser.report_semantic_error(" No existe el tipo " + t.getName() + " en la declaracion de variable " + n1,linea,columna); }
                        } 
                        if ( !parser.first_time && parser.in_method ){
                            if( parser.seen_types.get(t.getName()) == null){
                                parser.report_semantic_error("No existe el tipo" + t.getName() + " en la declaracion de la variable" + n1, linea,columna);
                            }
                            else{
                                boolean meter = parser.ambito.agregarATabla(n1,t );
                                if(!meter ) parser.report_semantic_error("Variable <" + n1 +  "> ya ha sido declarada en este contexto",linea,columna);
                            }   
                        } 
                    
              CUP$parser$result = new java_cup.runtime.Symbol(11/*declaracion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declar_var ::= DIM declaracion 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*declar_var*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // variables_declar ::= declar_var fin 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(30/*variables_declar*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // linea ::= error fin 
            {
              Object RESULT = null;
		 if(!parser.first_time) parser.report_error(" Se esperaba declaracion de variables, metodos o estructuras",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*linea*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // linea ::= dectype 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*linea*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // linea ::= metodo 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*linea*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // linea ::= declar_var FIN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*linea*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statements ::= linea 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*statements*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statements ::= linea statements 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*statements*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // fin ::= FIN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*fin*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // fin ::= FIN fin 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*fin*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // programa ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*programa*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa ::= fin 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*programa*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= statements 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*programa*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= fin statements 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*programa*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

