
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun May 20 12:49:51 CST 2012
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;

/** CUP v0.10k generated parser.
  * @version Sun May 20 12:49:51 CST 2012
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\260\000\002\011\004\000\002\002\004\000\002\011" +
    "\003\000\002\011\003\000\002\011\002\000\002\015\004" +
    "\000\002\015\003\000\002\012\004\000\002\012\003\000" +
    "\002\012\003\000\002\012\004\000\002\036\004\000\002" +
    "\014\004\000\002\013\007\000\002\013\005\000\002\013" +
    "\003\000\002\003\003\000\002\003\005\000\002\003\005" +
    "\000\002\005\003\000\002\005\003\000\002\010\003\000" +
    "\002\010\003\000\002\052\010\000\002\053\011\000\002" +
    "\053\011\000\002\053\005\000\002\053\012\000\002\053" +
    "\010\000\002\053\005\000\002\054\003\000\002\055\003" +
    "\000\002\037\004\000\002\037\003\000\002\037\004\000" +
    "\002\047\005\000\002\047\004\000\002\047\004\000\002" +
    "\041\005\000\002\041\004\000\002\041\005\000\002\042" +
    "\004\000\002\042\004\000\002\043\005\000\002\043\005" +
    "\000\002\043\004\000\002\031\003\000\002\031\004\000" +
    "\002\031\004\000\002\031\005\000\002\031\003\000\002" +
    "\031\004\000\002\031\003\000\002\024\004\000\002\024" +
    "\003\000\002\025\004\000\002\025\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\004\000\002\007\003\000\002\007\003\000\002" +
    "\007\004\000\002\007\005\000\002\007\004\000\002\061" +
    "\005\000\002\061\005\000\002\061\004\000\002\061\005" +
    "\000\002\061\005\000\002\061\004\000\002\060\005\000" +
    "\002\060\004\000\002\022\006\000\002\022\006\000\002" +
    "\065\003\000\002\065\005\000\002\065\005\000\002\064" +
    "\005\000\002\064\005\000\002\064\003\000\002\064\005" +
    "\000\002\062\005\000\002\062\005\000\002\062\005\000" +
    "\002\062\003\000\002\063\005\000\002\063\004\000\002" +
    "\063\003\000\002\063\003\000\002\063\003\000\002\063" +
    "\003\000\002\063\003\000\002\063\003\000\002\004\006" +
    "\000\002\004\003\000\002\004\005\000\002\066\002\000" +
    "\002\006\006\000\002\067\002\000\002\046\005\000\002" +
    "\046\003\000\002\070\002\000\002\045\006\000\002\045" +
    "\003\000\002\035\003\000\002\027\004\000\002\021\004" +
    "\000\002\021\003\000\002\021\003\000\002\030\005\000" +
    "\002\030\003\000\002\030\004\000\002\026\006\000\002" +
    "\026\006\000\002\026\005\000\002\026\006\000\002\026" +
    "\006\000\002\020\010\000\002\020\007\000\002\020\007" +
    "\000\002\020\006\000\002\020\006\000\002\020\007\000" +
    "\002\020\007\000\002\020\010\000\002\023\004\000\002" +
    "\023\007\000\002\023\006\000\002\023\004\000\002\023" +
    "\007\000\002\023\010\000\002\023\006\000\002\023\007" +
    "\000\002\023\006\000\002\023\007\000\002\023\007\000" +
    "\002\023\010\000\002\023\007\000\002\023\004\000\002" +
    "\040\004\000\002\040\004\000\002\056\003\000\002\057" +
    "\003\000\002\017\010\000\002\017\007\000\002\017\010" +
    "\000\002\017\007\000\002\017\007\000\002\017\010\000" +
    "\002\051\004\000\002\051\003\000\002\016\010\000\002" +
    "\016\007\000\002\016\007\000\002\016\010\000\002\016" +
    "\006\000\002\016\007\000\002\050\007\000\002\050\006" +
    "\000\002\050\006\000\002\050\005\000\002\050\007\000" +
    "\002\050\007\000\002\050\007\000\002\071\002\000\002" +
    "\044\011\000\002\044\007\000\002\033\004\000\002\033" +
    "\003\000\002\032\004\000\002\034\006\000\002\034\005" +
    "\000\002\034\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0153\000\020\002\ufffd\003\016\011\004\013\011\015" +
    "\014\016\020\051\013\001\002\000\006\003\u014b\034\u014e" +
    "\001\002\000\004\002\u014a\001\002\000\016\002\uffec\003" +
    "\uffec\011\uffec\015\uffec\016\uffec\051\uffec\001\002\000\016" +
    "\002\uffeb\003\uffeb\011\uffeb\015\uffeb\016\uffeb\051\uffeb\001" +
    "\002\000\016\002\ufff8\003\ufff8\011\ufff8\015\ufff8\016\ufff8" +
    "\051\ufff8\001\002\000\016\002\ufffe\003\016\011\004\015" +
    "\014\016\020\051\013\001\002\000\004\002\uffff\001\002" +
    "\000\004\034\u0131\001\002\000\004\034\u0126\001\002\000" +
    "\004\013\u0124\001\002\000\004\013\u0123\001\002\000\016" +
    "\002\ufffb\003\016\011\004\015\014\016\020\051\013\001" +
    "\002\000\006\003\022\034\023\001\002\000\016\002\ufff9" +
    "\003\ufff9\011\ufff9\015\ufff9\016\ufff9\051\ufff9\001\002\000" +
    "\004\013\u0121\001\002\000\006\003\uffe3\005\uffe3\001\002" +
    "\000\006\003\026\005\025\001\002\000\010\003\u0108\006" +
    "\u010a\014\u0109\001\002\000\022\002\uffe4\003\uffe4\006\377" +
    "\011\uffe4\013\u0100\015\uffe4\016\uffe4\051\uffe4\001\002\000" +
    "\006\003\031\010\030\001\002\000\006\003\375\036\376" +
    "\001\002\000\004\013\uffe0\001\002\000\004\013\033\001" +
    "\002\000\032\003\062\004\056\011\004\021\047\025\042" +
    "\026\064\034\044\040\051\041\041\042\035\050\043\052" +
    "\034\001\002\000\010\003\371\015\370\016\372\001\002" +
    "\000\006\003\365\034\241\001\002\000\004\017\360\001" +
    "\002\000\040\003\uffc9\004\056\020\uffc9\021\047\023\uffc9" +
    "\024\uffc9\025\uffc9\026\064\027\uffc9\034\044\040\051\041" +
    "\041\042\035\050\043\052\uffc9\001\002\000\040\003\uffc6" +
    "\004\uffc6\020\uffc6\021\uffc6\023\uffc6\024\uffc6\025\uffc6\026" +
    "\uffc6\027\uffc6\034\uffc6\040\uffc6\041\uffc6\042\uffc6\050\uffc6" +
    "\052\uffc6\001\002\000\010\003\353\034\241\037\074\001" +
    "\002\000\004\016\351\001\002\000\022\005\104\013\346" +
    "\031\073\032\076\033\100\034\111\037\074\054\105\001" +
    "\002\000\012\003\345\005\113\017\uffb4\053\112\001\002" +
    "\000\020\003\uffd3\020\uffd3\023\uffd3\024\uffd3\025\uffd3\027" +
    "\uffd3\052\034\001\002\000\004\025\341\001\002\000\022" +
    "\003\247\005\104\031\073\032\076\033\100\034\111\037" +
    "\074\054\105\001\002\000\040\003\uffc7\004\uffc7\020\uffc7" +
    "\021\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\034" +
    "\uffc7\040\uffc7\041\uffc7\042\uffc7\050\uffc7\052\uffc7\001\002" +
    "\000\010\003\240\034\241\037\074\001\002\000\040\003" +
    "\uffc5\004\uffc5\020\uffc5\021\uffc5\023\uffc5\024\uffc5\025\uffc5" +
    "\026\uffc5\027\uffc5\034\uffc5\040\uffc5\041\uffc5\042\uffc5\050" +
    "\uffc5\052\uffc5\001\002\000\040\003\uffcf\004\056\020\uffcf" +
    "\021\047\023\uffcf\024\uffcf\025\uffcf\026\064\027\uffcf\034" +
    "\044\040\051\041\041\042\035\050\043\052\034\001\002" +
    "\000\004\013\233\001\002\000\042\003\uffcb\004\uffcb\011" +
    "\004\020\uffcb\021\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb" +
    "\027\uffcb\034\uffcb\040\uffcb\041\uffcb\042\uffcb\050\uffcb\052" +
    "\uffcb\001\002\000\006\003\205\030\206\001\002\000\016" +
    "\003\uffcd\020\uffcd\023\uffcd\024\uffcd\025\uffcd\027\uffcd\001" +
    "\002\000\004\013\204\001\002\000\004\013\203\001\002" +
    "\000\004\013\202\001\002\000\040\003\uffc8\004\uffc8\020" +
    "\uffc8\021\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8" +
    "\034\uffc8\040\uffc8\041\uffc8\042\uffc8\050\uffc8\052\uffc8\001" +
    "\002\000\006\003\067\034\071\001\002\000\040\003\uffc3" +
    "\004\uffc3\020\uffc3\021\uffc3\023\uffc3\024\uffc3\025\uffc3\026" +
    "\uffc3\027\uffc3\034\uffc3\040\uffc3\041\uffc3\042\uffc3\050\uffc3" +
    "\052\uffc3\001\002\000\040\003\uffc2\004\uffc2\020\uffc2\021" +
    "\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\034\uffc2" +
    "\040\uffc2\041\uffc2\042\uffc2\050\uffc2\052\uffc2\001\002\000" +
    "\004\013\174\001\002\000\004\013\164\001\002\000\004" +
    "\017\072\001\002\000\024\003\103\005\104\007\077\031" +
    "\073\032\076\033\100\034\111\037\074\054\105\001\002" +
    "\000\030\006\uffa7\007\uffa7\012\uffa7\013\uffa7\017\uffa7\022" +
    "\uffa7\035\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\001\002" +
    "\000\032\006\uffa0\007\uffa0\012\uffa0\013\uffa0\017\uffa0\022" +
    "\uffa0\035\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0\055\160" +
    "\001\002\000\022\006\uffaf\007\uffaf\012\uffaf\013\uffaf\017" +
    "\uffaf\022\uffaf\045\uffaf\046\uffaf\001\002\000\030\006\uffa5" +
    "\007\uffa5\012\uffa5\013\uffa5\017\uffa5\022\uffa5\035\uffa5\043" +
    "\uffa5\044\uffa5\045\uffa5\046\uffa5\001\002\000\004\003\157" +
    "\001\002\000\030\006\uffa4\007\uffa4\012\uffa4\013\uffa4\017" +
    "\uffa4\022\uffa4\035\uffa4\043\uffa4\044\uffa4\045\uffa4\046\uffa4" +
    "\001\002\000\012\007\154\017\123\045\122\046\124\001" +
    "\002\000\030\006\uffaa\007\uffaa\012\uffaa\013\uffaa\017\uffaa" +
    "\022\uffaa\035\146\043\150\044\147\045\uffaa\046\uffaa\001" +
    "\002\000\006\007\143\013\uff5e\001\002\000\020\005\104" +
    "\031\073\032\076\033\100\034\111\037\074\054\105\001" +
    "\002\000\020\005\104\031\073\032\076\033\100\034\111" +
    "\037\074\054\105\001\002\000\030\006\uffa6\007\uffa6\012" +
    "\uffa6\013\uffa6\017\uffa6\022\uffa6\035\uffa6\043\uffa6\044\uffa6" +
    "\045\uffa6\046\uffa6\001\002\000\030\006\uffa2\007\uffa2\012" +
    "\uffa2\013\uffa2\017\uffa2\022\uffa2\035\uffa2\043\uffa2\044\uffa2" +
    "\045\uffa2\046\uffa2\001\002\000\030\006\uffa3\007\uffa3\012" +
    "\uffa3\013\uffa3\017\uffa3\022\uffa3\035\uffa3\043\uffa3\044\uffa3" +
    "\045\uffa3\046\uffa3\001\002\000\034\005\113\006\uffb4\007" +
    "\uffb4\012\uffb4\013\uffb4\017\uffb4\022\uffb4\035\uffb4\043\uffb4" +
    "\044\uffb4\045\uffb4\046\uffb4\053\112\001\002\000\006\003" +
    "\136\034\137\001\002\000\022\005\uff9e\006\uff9e\031\uff9e" +
    "\032\uff9e\033\uff9e\034\uff9e\037\uff9e\054\uff9e\001\002\000" +
    "\022\005\104\006\115\031\073\032\076\033\100\034\111" +
    "\037\074\054\105\001\002\000\030\006\uff96\007\uff96\012" +
    "\uff96\013\uff96\017\uff96\022\uff96\035\uff96\043\uff96\044\uff96" +
    "\045\uff96\046\uff96\001\002\000\014\006\uff9c\012\uff9c\017" +
    "\123\045\122\046\124\001\002\000\030\006\uff9d\007\uff9d" +
    "\012\uff9d\013\uff9d\017\uff9d\022\uff9d\035\uff9d\043\uff9d\044" +
    "\uff9d\045\uff9d\046\uff9d\001\002\000\030\006\uff9a\007\uff9a" +
    "\012\uff9a\013\uff9a\017\uff9a\022\uff9a\035\uff9a\043\uff9a\044" +
    "\uff9a\045\uff9a\046\uff9a\001\002\000\006\006\115\012\132" +
    "\001\002\000\020\005\104\031\073\032\076\033\100\034" +
    "\111\037\074\054\105\001\002\000\020\005\104\031\073" +
    "\032\076\033\100\034\111\037\074\054\105\001\002\000" +
    "\020\005\104\031\073\032\076\033\100\034\111\037\074" +
    "\054\105\001\002\000\022\006\uffb0\007\uffb0\012\uffb0\013" +
    "\uffb0\017\uffb0\022\uffb0\045\uffb0\046\uffb0\001\002\000\022" +
    "\006\uffae\007\uffae\012\uffae\013\uffae\017\uffae\022\uffae\045" +
    "\uffae\046\uffae\001\002\000\022\006\uffb1\007\uffb1\012\uffb1" +
    "\013\uffb1\017\uffb1\022\uffb1\045\uffb1\046\uffb1\001\002\000" +
    "\030\006\uff9b\007\uff9b\012\uff9b\013\uff9b\017\uff9b\022\uff9b" +
    "\035\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b\001\002\000" +
    "\030\006\uff97\007\uff97\012\uff97\013\uff97\017\uff97\022\uff97" +
    "\035\uff97\043\uff97\044\uff97\045\uff97\046\uff97\001\002\000" +
    "\020\005\104\031\073\032\076\033\100\034\111\037\074" +
    "\054\105\001\002\000\014\006\uff99\012\uff99\017\123\045" +
    "\122\046\124\001\002\000\006\006\115\012\132\001\002" +
    "\000\030\006\uff98\007\uff98\012\uff98\013\uff98\017\uff98\022" +
    "\uff98\035\uff98\043\uff98\044\uff98\045\uff98\046\uff98\001\002" +
    "\000\030\006\uffb2\007\uffb2\012\uffb2\013\uffb2\017\uffb2\022" +
    "\uffb2\035\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\001\002" +
    "\000\030\006\uffb3\007\uffb3\012\uffb3\013\uffb3\017\uffb3\022" +
    "\uffb3\035\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\001\002" +
    "\000\030\006\uffa8\007\uffa8\012\uffa8\013\uffa8\017\uffa8\022" +
    "\uffa8\035\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\001\002" +
    "\000\012\006\142\017\123\045\122\046\124\001\002\000" +
    "\030\006\uffa9\007\uffa9\012\uffa9\013\uffa9\017\uffa9\022\uffa9" +
    "\035\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\001\002\000" +
    "\024\003\145\005\104\013\uff5f\031\073\032\076\033\100" +
    "\034\111\037\074\054\105\001\002\000\012\013\uff5b\017" +
    "\123\045\122\046\124\001\002\000\004\013\uff5d\001\002" +
    "\000\020\005\104\031\073\032\076\033\100\034\111\037" +
    "\074\054\105\001\002\000\020\005\104\031\073\032\076" +
    "\033\100\034\111\037\074\054\105\001\002\000\020\005" +
    "\104\031\073\032\076\033\100\034\111\037\074\054\105" +
    "\001\002\000\022\006\uffad\007\uffad\012\uffad\013\uffad\017" +
    "\uffad\022\uffad\045\uffad\046\uffad\001\002\000\022\006\uffac" +
    "\007\uffac\012\uffac\013\uffac\017\uffac\022\uffac\045\uffac\046" +
    "\uffac\001\002\000\022\006\uffab\007\uffab\012\uffab\013\uffab" +
    "\017\uffab\022\uffab\045\uffab\046\uffab\001\002\000\022\003" +
    "\156\005\104\031\073\032\076\033\100\034\111\037\074" +
    "\054\105\001\002\000\012\013\uff61\017\123\045\122\046" +
    "\124\001\002\000\004\013\uff5c\001\002\000\004\013\uff60" +
    "\001\002\000\006\003\161\013\162\001\002\000\030\006" +
    "\uff9f\007\uff9f\012\uff9f\013\uff9f\017\uff9f\022\uff9f\035\uff9f" +
    "\043\uff9f\044\uff9f\045\uff9f\046\uff9f\001\002\000\004\037" +
    "\074\001\002\000\030\006\uffa1\007\uffa1\012\uffa1\013\uffa1" +
    "\017\uffa1\022\uffa1\035\uffa1\043\uffa1\044\uffa1\045\uffa1\046" +
    "\uffa1\001\002\000\032\003\166\004\056\011\004\021\047" +
    "\026\064\027\167\034\044\040\051\041\041\042\035\050" +
    "\043\052\034\001\002\000\006\003\171\027\172\001\002" +
    "\000\040\003\uff63\004\uff63\020\uff63\021\uff63\023\uff63\024" +
    "\uff63\025\uff63\026\uff63\027\uff63\034\uff63\040\uff63\041\uff63" +
    "\042\uff63\050\uff63\052\uff63\001\002\000\004\013\170\001" +
    "\002\000\040\003\uff66\004\uff66\020\uff66\021\uff66\023\uff66" +
    "\024\uff66\025\uff66\026\uff66\027\uff66\034\uff66\040\uff66\041" +
    "\uff66\042\uff66\050\uff66\052\uff66\001\002\000\040\003\uff62" +
    "\004\uff62\020\uff62\021\uff62\023\uff62\024\uff62\025\uff62\026" +
    "\uff62\027\uff62\034\uff62\040\uff62\041\uff62\042\uff62\050\uff62" +
    "\052\uff62\001\002\000\004\013\173\001\002\000\040\003" +
    "\uff67\004\uff67\020\uff67\021\uff67\023\uff67\024\uff67\025\uff67" +
    "\026\uff67\027\uff67\034\uff67\040\uff67\041\uff67\042\uff67\050" +
    "\uff67\052\uff67\001\002\000\030\004\056\011\004\021\047" +
    "\026\064\027\176\034\044\040\051\041\041\042\035\050" +
    "\043\052\034\001\002\000\004\027\200\001\002\000\004" +
    "\013\177\001\002\000\040\003\uff65\004\uff65\020\uff65\021" +
    "\uff65\023\uff65\024\uff65\025\uff65\026\uff65\027\uff65\034\uff65" +
    "\040\uff65\041\uff65\042\uff65\050\uff65\052\uff65\001\002\000" +
    "\004\013\201\001\002\000\040\003\uff64\004\uff64\020\uff64" +
    "\021\uff64\023\uff64\024\uff64\025\uff64\026\uff64\027\uff64\034" +
    "\uff64\040\uff64\041\uff64\042\uff64\050\uff64\052\uff64\001\002" +
    "\000\016\002\uffe8\003\uffe8\011\uffe8\015\uffe8\016\uffe8\051" +
    "\uffe8\001\002\000\040\003\uffc4\004\uffc4\020\uffc4\021\uffc4" +
    "\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\034\uffc4\040" +
    "\uffc4\041\uffc4\042\uffc4\050\uffc4\052\uffc4\001\002\000\042" +
    "\003\ufff6\004\ufff6\011\ufff6\020\ufff6\021\ufff6\023\ufff6\024" +
    "\ufff6\025\ufff6\026\ufff6\027\ufff6\034\ufff6\040\ufff6\041\ufff6" +
    "\042\ufff6\050\ufff6\052\ufff6\001\002\000\020\005\104\031" +
    "\073\032\076\033\100\034\111\037\074\054\105\001\002" +
    "\000\022\003\210\005\104\031\073\032\076\033\100\034" +
    "\111\037\074\054\105\001\002\000\012\013\uff71\017\123" +
    "\045\122\046\124\001\002\000\004\013\221\001\002\000" +
    "\004\013\212\001\002\000\032\003\216\004\056\011\004" +
    "\020\213\021\047\026\064\034\044\040\051\041\041\042" +
    "\035\050\043\052\034\001\002\000\004\013\220\001\002" +
    "\000\006\003\216\020\213\001\002\000\040\003\uff6e\004" +
    "\uff6e\020\uff6e\021\uff6e\023\uff6e\024\uff6e\025\uff6e\026\uff6e" +
    "\027\uff6e\034\uff6e\040\uff6e\041\uff6e\042\uff6e\050\uff6e\052" +
    "\uff6e\001\002\000\040\003\uff68\004\uff68\020\uff68\021\uff68" +
    "\023\uff68\024\uff68\025\uff68\026\uff68\027\uff68\034\uff68\040" +
    "\uff68\041\uff68\042\uff68\050\uff68\052\uff68\001\002\000\040" +
    "\003\uff6f\004\uff6f\020\uff6f\021\uff6f\023\uff6f\024\uff6f\025" +
    "\uff6f\026\uff6f\027\uff6f\034\uff6f\040\uff6f\041\uff6f\042\uff6f" +
    "\050\uff6f\052\uff6f\001\002\000\040\003\uff69\004\uff69\020" +
    "\uff69\021\uff69\023\uff69\024\uff69\025\uff69\026\uff69\027\uff69" +
    "\034\uff69\040\uff69\041\uff69\042\uff69\050\uff69\052\uff69\001" +
    "\002\000\032\003\216\004\056\011\004\020\213\021\047" +
    "\026\064\034\044\040\051\041\041\042\035\050\043\052" +
    "\034\001\002\000\006\003\216\020\213\001\002\000\040" +
    "\003\uff6b\004\uff6b\020\uff6b\021\uff6b\023\uff6b\024\uff6b\025" +
    "\uff6b\026\uff6b\027\uff6b\034\uff6b\040\uff6b\041\uff6b\042\uff6b" +
    "\050\uff6b\052\uff6b\001\002\000\040\003\uff6a\004\uff6a\020" +
    "\uff6a\021\uff6a\023\uff6a\024\uff6a\025\uff6a\026\uff6a\027\uff6a" +
    "\034\uff6a\040\uff6a\041\uff6a\042\uff6a\050\uff6a\052\uff6a\001" +
    "\002\000\004\013\226\001\002\000\032\003\216\004\056" +
    "\011\004\020\213\021\047\026\064\034\044\040\051\041" +
    "\041\042\035\050\043\052\034\001\002\000\006\003\216" +
    "\020\213\001\002\000\040\003\uff6c\004\uff6c\020\uff6c\021" +
    "\uff6c\023\uff6c\024\uff6c\025\uff6c\026\uff6c\027\uff6c\034\uff6c" +
    "\040\uff6c\041\uff6c\042\uff6c\050\uff6c\052\uff6c\001\002\000" +
    "\040\003\uff6d\004\uff6d\020\uff6d\021\uff6d\023\uff6d\024\uff6d" +
    "\025\uff6d\026\uff6d\027\uff6d\034\uff6d\040\uff6d\041\uff6d\042" +
    "\uff6d\050\uff6d\052\uff6d\001\002\000\040\003\uffcc\004\uffcc" +
    "\020\uffcc\021\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027" +
    "\uffcc\034\uffcc\040\uffcc\041\uffcc\042\uffcc\050\uffcc\052\uffcc" +
    "\001\002\000\016\002\uffe9\003\uffe9\011\uffe9\015\uffe9\016" +
    "\uffe9\051\uffe9\001\002\000\020\003\uffd1\020\uffd1\023\uffd1" +
    "\024\uffd1\025\uffd1\027\uffd1\052\034\001\002\000\016\003" +
    "\uffce\020\uffce\023\uffce\024\uffce\025\uffce\027\uffce\001\002" +
    "\000\016\003\uffd0\020\uffd0\023\uffd0\024\uffd0\025\uffd0\027" +
    "\uffd0\001\002\000\004\013\244\001\002\000\040\003\uffbc" +
    "\004\uffbc\020\uffbc\021\uffbc\023\uffbc\024\uffbc\025\uffbc\026" +
    "\uffbc\027\uffbc\034\uffbc\040\uffbc\041\uffbc\042\uffbc\050\uffbc" +
    "\052\uffbc\001\002\000\006\013\uffb4\053\112\001\002\000" +
    "\004\013\243\001\002\000\040\003\uffbd\004\uffbd\020\uffbd" +
    "\021\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\034" +
    "\uffbd\040\uffbd\041\uffbd\042\uffbd\050\uffbd\052\uffbd\001\002" +
    "\000\040\003\uffbe\004\uffbe\020\uffbe\021\uffbe\023\uffbe\024" +
    "\uffbe\025\uffbe\026\uffbe\027\uffbe\034\uffbe\040\uffbe\041\uffbe" +
    "\042\uffbe\050\uffbe\052\uffbe\001\002\000\006\013\331\022" +
    "\330\001\002\000\014\013\uff70\017\123\022\uff70\045\122" +
    "\046\124\001\002\000\006\013\251\022\250\001\002\000" +
    "\004\013\324\001\002\000\036\003\260\004\056\011\004" +
    "\021\047\023\252\024\257\025\253\026\064\034\044\040" +
    "\051\041\041\042\035\050\043\052\034\001\002\000\006" +
    "\003\312\013\313\001\002\000\006\003\310\021\311\001" +
    "\002\000\004\013\307\001\002\000\012\003\260\023\252" +
    "\024\257\025\253\001\002\000\040\003\uff85\004\uff85\020" +
    "\uff85\021\uff85\023\uff85\024\uff85\025\uff85\026\uff85\027\uff85" +
    "\034\uff85\040\uff85\041\uff85\042\uff85\050\uff85\052\uff85\001" +
    "\002\000\022\003\263\005\104\031\073\032\076\033\100" +
    "\034\111\037\074\054\105\001\002\000\004\025\253\001" +
    "\002\000\040\003\uff74\004\uff74\020\uff74\021\uff74\023\uff74" +
    "\024\uff74\025\uff74\026\uff74\027\uff74\034\uff74\040\uff74\041" +
    "\uff74\042\uff74\050\uff74\052\uff74\001\002\000\006\013\276" +
    "\022\275\001\002\000\006\013\265\022\264\001\002\000" +
    "\004\013\271\001\002\000\036\003\260\004\056\011\004" +
    "\021\047\023\252\024\257\025\253\026\064\034\044\040" +
    "\051\041\041\042\035\050\043\052\034\001\002\000\012" +
    "\003\260\023\252\024\257\025\253\001\002\000\040\003" +
    "\uff79\004\uff79\020\uff79\021\uff79\023\uff79\024\uff79\025\uff79" +
    "\026\uff79\027\uff79\034\uff79\040\uff79\041\uff79\042\uff79\050" +
    "\uff79\052\uff79\001\002\000\040\003\uff77\004\uff77\020\uff77" +
    "\021\uff77\023\uff77\024\uff77\025\uff77\026\uff77\027\uff77\034" +
    "\uff77\040\uff77\041\uff77\042\uff77\050\uff77\052\uff77\001\002" +
    "\000\036\003\260\004\056\011\004\021\047\023\252\024" +
    "\257\025\253\026\064\034\044\040\051\041\041\042\035" +
    "\050\043\052\034\001\002\000\012\003\260\023\252\024" +
    "\257\025\253\001\002\000\040\003\uff78\004\uff78\020\uff78" +
    "\021\uff78\023\uff78\024\uff78\025\uff78\026\uff78\027\uff78\034" +
    "\uff78\040\uff78\041\uff78\042\uff78\050\uff78\052\uff78\001\002" +
    "\000\040\003\uff76\004\uff76\020\uff76\021\uff76\023\uff76\024" +
    "\uff76\025\uff76\026\uff76\027\uff76\034\uff76\040\uff76\041\uff76" +
    "\042\uff76\050\uff76\052\uff76\001\002\000\004\013\302\001" +
    "\002\000\036\003\260\004\056\011\004\021\047\023\252" +
    "\024\257\025\253\026\064\034\044\040\051\041\041\042" +
    "\035\050\043\052\034\001\002\000\012\003\260\023\252" +
    "\024\257\025\253\001\002\000\040\003\uff7b\004\uff7b\020" +
    "\uff7b\021\uff7b\023\uff7b\024\uff7b\025\uff7b\026\uff7b\027\uff7b" +
    "\034\uff7b\040\uff7b\041\uff7b\042\uff7b\050\uff7b\052\uff7b\001" +
    "\002\000\040\003\uff7d\004\uff7d\020\uff7d\021\uff7d\023\uff7d" +
    "\024\uff7d\025\uff7d\026\uff7d\027\uff7d\034\uff7d\040\uff7d\041" +
    "\uff7d\042\uff7d\050\uff7d\052\uff7d\001\002\000\036\003\260" +
    "\004\056\011\004\021\047\023\252\024\257\025\253\026" +
    "\064\034\044\040\051\041\041\042\035\050\043\052\034" +
    "\001\002\000\012\003\260\023\252\024\257\025\253\001" +
    "\002\000\040\003\uff7a\004\uff7a\020\uff7a\021\uff7a\023\uff7a" +
    "\024\uff7a\025\uff7a\026\uff7a\027\uff7a\034\uff7a\040\uff7a\041" +
    "\uff7a\042\uff7a\050\uff7a\052\uff7a\001\002\000\040\003\uff7c" +
    "\004\uff7c\020\uff7c\021\uff7c\023\uff7c\024\uff7c\025\uff7c\026" +
    "\uff7c\027\uff7c\034\uff7c\040\uff7c\041\uff7c\042\uff7c\050\uff7c" +
    "\052\uff7c\001\002\000\040\003\uff83\004\uff83\020\uff83\021" +
    "\uff83\023\uff83\024\uff83\025\uff83\026\uff83\027\uff83\034\uff83" +
    "\040\uff83\041\uff83\042\uff83\050\uff83\052\uff83\001\002\000" +
    "\040\003\uff81\004\uff81\020\uff81\021\uff81\023\uff81\024\uff81" +
    "\025\uff81\026\uff81\027\uff81\034\uff81\040\uff81\041\uff81\042" +
    "\uff81\050\uff81\052\uff81\001\002\000\042\003\uff72\004\uff72" +
    "\013\uff72\020\uff72\021\uff72\023\uff72\024\uff72\025\uff72\026" +
    "\uff72\027\uff72\034\uff72\040\uff72\041\uff72\042\uff72\050\uff72" +
    "\052\uff72\001\002\000\042\003\uff73\004\uff73\013\uff73\020" +
    "\uff73\021\uff73\023\uff73\024\uff73\025\uff73\026\uff73\027\uff73" +
    "\034\uff73\040\uff73\041\uff73\042\uff73\050\uff73\052\uff73\001" +
    "\002\000\040\003\uff7e\004\uff7e\020\uff7e\021\uff7e\023\uff7e" +
    "\024\uff7e\025\uff7e\026\uff7e\027\uff7e\034\uff7e\040\uff7e\041" +
    "\uff7e\042\uff7e\050\uff7e\052\uff7e\001\002\000\032\003\316" +
    "\004\056\011\004\021\047\025\253\026\064\034\044\040" +
    "\051\041\041\042\035\050\043\052\034\001\002\000\004" +
    "\013\323\001\002\000\004\025\253\001\002\000\004\025" +
    "\253\001\002\000\004\013\320\001\002\000\040\003\uff75" +
    "\004\uff75\020\uff75\021\uff75\023\uff75\024\uff75\025\uff75\026" +
    "\uff75\027\uff75\034\uff75\040\uff75\041\uff75\042\uff75\050\uff75" +
    "\052\uff75\001\002\000\004\013\322\001\002\000\040\003" +
    "\uff80\004\uff80\020\uff80\021\uff80\023\uff80\024\uff80\025\uff80" +
    "\026\uff80\027\uff80\034\uff80\040\uff80\041\uff80\042\uff80\050" +
    "\uff80\052\uff80\001\002\000\040\003\uff7f\004\uff7f\020\uff7f" +
    "\021\uff7f\023\uff7f\024\uff7f\025\uff7f\026\uff7f\027\uff7f\034" +
    "\uff7f\040\uff7f\041\uff7f\042\uff7f\050\uff7f\052\uff7f\001\002" +
    "\000\036\003\260\004\056\011\004\021\047\023\252\024" +
    "\257\025\253\026\064\034\044\040\051\041\041\042\035" +
    "\050\043\052\034\001\002\000\012\003\260\023\252\024" +
    "\257\025\253\001\002\000\040\003\uff84\004\uff84\020\uff84" +
    "\021\uff84\023\uff84\024\uff84\025\uff84\026\uff84\027\uff84\034" +
    "\uff84\040\uff84\041\uff84\042\uff84\050\uff84\052\uff84\001\002" +
    "\000\040\003\uff82\004\uff82\020\uff82\021\uff82\023\uff82\024" +
    "\uff82\025\uff82\026\uff82\027\uff82\034\uff82\040\uff82\041\uff82" +
    "\042\uff82\050\uff82\052\uff82\001\002\000\004\013\335\001" +
    "\002\000\036\003\260\004\056\011\004\021\047\023\252" +
    "\024\257\025\253\026\064\034\044\040\051\041\041\042" +
    "\035\050\043\052\034\001\002\000\012\003\260\023\252" +
    "\024\257\025\253\001\002\000\040\003\uff86\004\uff86\020" +
    "\uff86\021\uff86\023\uff86\024\uff86\025\uff86\026\uff86\027\uff86" +
    "\034\uff86\040\uff86\041\uff86\042\uff86\050\uff86\052\uff86\001" +
    "\002\000\040\003\uff88\004\uff88\020\uff88\021\uff88\023\uff88" +
    "\024\uff88\025\uff88\026\uff88\027\uff88\034\uff88\040\uff88\041" +
    "\uff88\042\uff88\050\uff88\052\uff88\001\002\000\036\003\260" +
    "\004\056\011\004\021\047\023\252\024\257\025\253\026" +
    "\064\034\044\040\051\041\041\042\035\050\043\052\034" +
    "\001\002\000\012\003\260\023\252\024\257\025\253\001" +
    "\002\000\040\003\uff87\004\uff87\020\uff87\021\uff87\023\uff87" +
    "\024\uff87\025\uff87\026\uff87\027\uff87\034\uff87\040\uff87\041" +
    "\uff87\042\uff87\050\uff87\052\uff87\001\002\000\040\003\uff89" +
    "\004\uff89\020\uff89\021\uff89\023\uff89\024\uff89\025\uff89\026" +
    "\uff89\027\uff89\034\uff89\040\uff89\041\uff89\042\uff89\050\uff89" +
    "\052\uff89\001\002\000\006\003\342\016\343\001\002\000" +
    "\004\013\uffd9\001\002\000\004\013\uffdb\001\002\000\016" +
    "\003\uffd2\020\uffd2\023\uffd2\024\uffd2\025\uffd2\027\uffd2\001" +
    "\002\000\040\003\uffbf\004\uffbf\020\uffbf\021\uffbf\023\uffbf" +
    "\024\uffbf\025\uffbf\026\uffbf\027\uffbf\034\uffbf\040\uffbf\041" +
    "\uffbf\042\uffbf\050\uffbf\052\uffbf\001\002\000\040\003\uffc1" +
    "\004\uffc1\020\uffc1\021\uffc1\023\uffc1\024\uffc1\025\uffc1\026" +
    "\uffc1\027\uffc1\034\uffc1\040\uffc1\041\uffc1\042\uffc1\050\uffc1" +
    "\052\uffc1\001\002\000\012\013\350\017\123\045\122\046" +
    "\124\001\002\000\040\003\uffc0\004\uffc0\020\uffc0\021\uffc0" +
    "\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\034\uffc0\040" +
    "\uffc0\041\uffc0\042\uffc0\050\uffc0\052\uffc0\001\002\000\004" +
    "\013\uffda\001\002\000\004\013\356\001\002\000\040\003" +
    "\uffb9\004\uffb9\020\uffb9\021\uffb9\023\uffb9\024\uffb9\025\uffb9" +
    "\026\uffb9\027\uffb9\034\uffb9\040\uffb9\041\uffb9\042\uffb9\050" +
    "\uffb9\052\uffb9\001\002\000\004\013\355\001\002\000\040" +
    "\003\uffbb\004\uffbb\020\uffbb\021\uffbb\023\uffbb\024\uffbb\025" +
    "\uffbb\026\uffbb\027\uffbb\034\uffbb\040\uffbb\041\uffbb\042\uffbb" +
    "\050\uffbb\052\uffbb\001\002\000\040\003\uffba\004\uffba\020" +
    "\uffba\021\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba" +
    "\034\uffba\040\uffba\041\uffba\042\uffba\050\uffba\052\uffba\001" +
    "\002\000\020\003\uffca\020\uffca\023\uffca\024\uffca\025\uffca" +
    "\027\uffca\052\uffca\001\002\000\022\003\362\005\104\031" +
    "\073\032\076\033\100\034\111\037\074\054\105\001\002" +
    "\000\012\013\364\017\123\045\122\046\124\001\002\000" +
    "\004\013\363\001\002\000\040\003\uffb5\004\uffb5\020\uffb5" +
    "\021\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\034" +
    "\uffb5\040\uffb5\041\uffb5\042\uffb5\050\uffb5\052\uffb5\001\002" +
    "\000\040\003\uffb6\004\uffb6\020\uffb6\021\uffb6\023\uffb6\024" +
    "\uffb6\025\uffb6\026\uffb6\027\uffb6\034\uffb6\040\uffb6\041\uffb6" +
    "\042\uffb6\050\uffb6\052\uffb6\001\002\000\040\003\uffb7\004" +
    "\uffb7\020\uffb7\021\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7" +
    "\027\uffb7\034\uffb7\040\uffb7\041\uffb7\042\uffb7\050\uffb7\052" +
    "\uffb7\001\002\000\004\013\367\001\002\000\040\003\uffb8" +
    "\004\uffb8\020\uffb8\021\uffb8\023\uffb8\024\uffb8\025\uffb8\026" +
    "\uffb8\027\uffb8\034\uffb8\040\uffb8\041\uffb8\042\uffb8\050\uffb8" +
    "\052\uffb8\001\002\000\004\013\374\001\002\000\016\003" +
    "\uffd4\020\uffd4\023\uffd4\024\uffd4\025\uffd4\027\uffd4\001\002" +
    "\000\004\013\373\001\002\000\016\003\uffd5\020\uffd5\023" +
    "\uffd5\024\uffd5\025\uffd5\027\uffd5\001\002\000\016\003\uffd6" +
    "\020\uffd6\023\uffd6\024\uffd6\025\uffd6\027\uffd6\001\002\000" +
    "\004\013\uffdf\001\002\000\004\013\uffe1\001\002\000\006" +
    "\003\031\010\030\001\002\000\030\004\056\011\004\021" +
    "\047\025\042\026\064\034\044\040\051\041\041\042\035" +
    "\050\043\052\034\001\002\000\004\013\u0102\001\002\000" +
    "\016\002\uffe5\003\uffe5\011\uffe5\015\uffe5\016\uffe5\051\uffe5" +
    "\001\002\000\004\013\u0104\001\002\000\030\004\056\011" +
    "\004\021\047\025\042\026\064\034\044\040\051\041\041" +
    "\042\035\050\043\052\034\001\002\000\004\013\u0106\001" +
    "\002\000\016\002\uffe6\003\uffe6\011\uffe6\015\uffe6\016\uffe6" +
    "\051\uffe6\001\002\000\010\003\uff95\010\uff95\013\uff95\001" +
    "\002\000\012\003\uff92\010\uff92\013\uff92\034\u0113\001\002" +
    "\000\006\003\u0119\034\u011a\001\002\000\010\003\uff93\010" +
    "\uff93\013\uff93\001\002\000\010\003\u010c\006\u010d\012\u010e" +
    "\001\002\000\004\006\u0118\001\002\000\010\003\uff90\010" +
    "\uff90\013\uff90\001\002\000\006\003\u0110\014\u0109\001\002" +
    "\000\010\003\uff94\010\uff94\013\uff94\001\002\000\004\034" +
    "\u0113\001\002\000\010\003\u010c\006\u010d\012\u010e\001\002" +
    "\000\010\003\uff91\010\uff91\013\uff91\001\002\000\004\010" +
    "\u0114\001\002\000\006\034\u0116\036\u0117\001\002\000\010" +
    "\003\uff8a\006\uff8a\012\uff8a\001\002\000\012\003\uffed\006" +
    "\uffed\012\uffed\013\uffed\001\002\000\012\003\uffee\006\uffee" +
    "\012\uffee\013\uffee\001\002\000\010\003\uff8f\010\uff8f\013" +
    "\uff8f\001\002\000\004\010\u011f\001\002\000\006\003\u011c" +
    "\010\u011b\001\002\000\010\003\u011d\034\u0116\036\u0117\001" +
    "\002\000\010\003\uff8c\006\uff8c\012\uff8c\001\002\000\010" +
    "\003\uff8d\006\uff8d\012\uff8d\001\002\000\010\003\uff8e\006" +
    "\uff8e\012\uff8e\001\002\000\006\034\u0116\036\u0117\001\002" +
    "\000\010\003\uff8b\006\uff8b\012\uff8b\001\002\000\016\002" +
    "\uffe7\003\uffe7\011\uffe7\015\uffe7\016\uffe7\051\uffe7\001\002" +
    "\000\004\002\ufffc\001\002\000\016\002\ufff7\003\ufff7\011" +
    "\ufff7\015\ufff7\016\ufff7\051\ufff7\001\002\000\016\002\ufffa" +
    "\003\ufffa\011\ufffa\015\ufffa\016\ufffa\051\ufffa\001\002\000" +
    "\004\005\025\001\002\000\004\005\uffe2\001\002\000\004" +
    "\013\u0128\001\002\000\030\004\056\011\004\021\047\025" +
    "\u012a\026\064\034\044\040\051\041\041\042\035\050\043" +
    "\052\034\001\002\000\004\013\u0130\001\002\000\006\003" +
    "\u012f\015\u012e\001\002\000\004\025\u012c\001\002\000\004" +
    "\015\u012d\001\002\000\004\013\uffde\001\002\000\004\013" +
    "\uffdd\001\002\000\004\013\uffdc\001\002\000\016\002\uffea" +
    "\003\uffea\011\uffea\015\uffea\016\uffea\051\uffea\001\002\000" +
    "\006\003\u0132\013\u0133\001\002\000\004\025\u0142\001\002" +
    "\000\010\003\uff5a\011\uff5a\034\uff5a\001\002\000\010\003" +
    "\u0136\011\u0139\034\u013a\001\002\000\004\013\u0146\001\002" +
    "\000\004\013\uff52\001\002\000\004\025\u0142\001\002\000" +
    "\012\003\u0136\011\u0139\025\uff56\034\u013a\001\002\000\004" +
    "\034\u013d\001\002\000\004\010\u013b\001\002\000\006\034" +
    "\u0116\036\u0117\001\002\000\004\013\uff53\001\002\000\004" +
    "\010\u013e\001\002\000\006\034\u0116\036\u0117\001\002\000" +
    "\004\013\uff54\001\002\000\004\025\uff57\001\002\000\004" +
    "\013\u0145\001\002\000\006\003\u0143\051\u0144\001\002\000" +
    "\004\013\uffd7\001\002\000\004\013\uffd8\001\002\000\016" +
    "\002\uff59\003\uff59\011\uff59\015\uff59\016\uff59\051\uff59\001" +
    "\002\000\012\003\uff55\011\uff55\025\uff55\034\uff55\001\002" +
    "\000\004\013\u0148\001\002\000\016\002\uff58\003\uff58\011" +
    "\uff58\015\uff58\016\uff58\051\uff58\001\002\000\004\002\001" +
    "\001\002\000\004\002\000\001\002\000\004\013\ufff2\001" +
    "\002\000\004\013\ufff5\001\002\000\004\010\u0152\001\002" +
    "\000\006\010\ufff1\012\u014f\001\002\000\006\003\u0150\034" +
    "\u014e\001\002\000\004\010\uffef\001\002\000\004\010\ufff0" +
    "\001\002\000\006\034\u0116\036\u0117\001\002\000\006\012" +
    "\u0154\013\ufff3\001\002\000\006\003\u014b\034\u014e\001\002" +
    "\000\004\013\ufff4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0153\000\022\010\020\011\004\012\016\014\014\015" +
    "\011\044\007\052\005\053\006\001\001\000\006\003\u014c" +
    "\013\u014b\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\010\020\012\016" +
    "\014\014\015\u0148\044\007\052\005\053\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\055\u0124\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\010\020\012" +
    "\016\014\014\015\u0121\044\007\052\005\053\006\001\001" +
    "\000\004\054\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\026\001\001\000\006" +
    "\021\u0106\026\u010a\001\001\000\002\001\001\000\004\037" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\006\060\007\036\014\057\016\047\017" +
    "\037\020\062\022\051\024\052\025\044\031\045\036\054" +
    "\041\053\043\056\060\065\061\064\065\035\001\001\000" +
    "\002\001\001\000\004\065\365\001\001\000\002\001\001" +
    "\000\026\006\060\007\036\016\047\017\037\020\062\022" +
    "\051\025\356\060\065\061\064\065\035\001\001\000\002" +
    "\001\001\000\006\004\351\065\353\001\001\000\002\001" +
    "\001\000\016\004\107\006\106\062\074\063\101\064\346" +
    "\065\105\001\001\000\002\001\001\000\004\043\343\001" +
    "\001\000\002\001\001\000\020\004\107\006\106\057\244" +
    "\062\074\063\101\064\245\065\105\001\001\000\002\001" +
    "\001\000\006\004\236\065\241\001\001\000\002\001\001" +
    "\000\030\006\060\007\036\016\047\017\037\020\062\022" +
    "\051\025\233\043\234\060\065\061\064\065\035\001\001" +
    "\000\002\001\001\000\010\014\057\024\231\036\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\050\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\004\107\006\106\062\074\063\101\064\100\065\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\004\107\006\106\062\074\063\101\064\140\065\105" +
    "\001\001\000\012\004\107\006\106\063\137\065\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\066\113\001" +
    "\001\000\022\004\107\006\106\035\117\046\116\062\074" +
    "\063\101\064\115\065\105\001\001\000\002\001\001\000" +
    "\004\067\120\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\035\130\045\127\001\001\000\014\004\107\006" +
    "\106\062\126\063\101\065\105\001\001\000\014\004\107" +
    "\006\106\062\125\063\101\065\105\001\001\000\014\004" +
    "\107\006\106\062\124\063\101\065\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\004\107\006\106\062\074" +
    "\063\101\064\132\065\105\001\001\000\004\070\133\001" +
    "\001\000\006\035\130\045\134\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\004\107\006\106" +
    "\062\074\063\101\064\143\065\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\004\107\006\106\062\152" +
    "\063\101\065\105\001\001\000\014\004\107\006\106\062" +
    "\151\063\101\065\105\001\001\000\014\004\107\006\106" +
    "\062\150\063\101\065\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\004\107\006\106" +
    "\062\074\063\101\064\154\065\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\162\001\001\000\002\001" +
    "\001\000\040\006\060\007\036\014\057\016\047\017\037" +
    "\020\062\022\051\024\052\025\044\031\164\036\054\043" +
    "\056\060\065\061\064\065\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\006\060\007\036\014\057\016\047\017\037\020\062\022" +
    "\051\024\052\025\044\031\174\036\054\043\056\060\065" +
    "\061\064\065\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\004\107\006\106\056\224\062\074\063\101\064\206" +
    "\065\105\001\001\000\020\004\107\006\106\056\210\062" +
    "\074\063\101\064\206\065\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\006\060\007" +
    "\036\014\057\016\047\017\037\020\062\022\051\024\052" +
    "\025\044\031\213\036\054\043\056\051\214\060\065\061" +
    "\064\065\035\001\001\000\002\001\001\000\004\051\216" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\006\060\007\036\014\057" +
    "\016\047\017\037\020\062\022\051\024\052\025\044\031" +
    "\221\036\054\043\056\051\222\060\065\061\064\065\035" +
    "\001\001\000\004\051\223\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\006\060\007\036" +
    "\014\057\016\047\017\037\020\062\022\051\024\052\025" +
    "\044\031\226\036\054\043\056\051\227\060\065\061\064" +
    "\065\035\001\001\000\004\051\230\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\043\235\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\006\060\007\036\014\057\016\047\017" +
    "\037\020\062\022\051\023\255\024\052\025\044\031\254" +
    "\036\054\040\253\043\056\060\065\061\064\065\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\023\305\040\253\001\001\000\002\001\001\000" +
    "\020\004\107\006\106\057\261\062\074\063\101\064\245" +
    "\065\105\001\001\000\004\040\260\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\006\060\007\036\014\057\016\047\017\037\020" +
    "\062\022\051\023\266\024\052\025\044\031\265\036\054" +
    "\040\253\043\056\060\065\061\064\065\035\001\001\000" +
    "\006\023\267\040\253\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\006\060\007\036\014\057\016\047\017" +
    "\037\020\062\022\051\023\272\024\052\025\044\031\271" +
    "\036\054\040\253\043\056\060\065\061\064\065\035\001" +
    "\001\000\006\023\273\040\253\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\006\060\007" +
    "\036\014\057\016\047\017\037\020\062\022\051\023\277" +
    "\024\052\025\044\031\276\036\054\040\253\043\056\060" +
    "\065\061\064\065\035\001\001\000\006\023\300\040\253" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\006" +
    "\060\007\036\014\057\016\047\017\037\020\062\022\051" +
    "\023\303\024\052\025\044\031\302\036\054\040\253\043" +
    "\056\060\065\061\064\065\035\001\001\000\006\023\304" +
    "\040\253\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\006\060\007\036\014" +
    "\057\016\047\017\037\020\062\022\051\024\052\025\044" +
    "\031\314\036\054\040\313\043\056\060\065\061\064\065" +
    "\035\001\001\000\002\001\001\000\004\040\320\001\001" +
    "\000\004\040\316\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\006\060\007\036\014\057\016\047\017\037\020" +
    "\062\022\051\023\325\024\052\025\044\031\324\036\054" +
    "\040\253\043\056\060\065\061\064\065\035\001\001\000" +
    "\006\023\326\040\253\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\006\060\007\036\014" +
    "\057\016\047\017\037\020\062\022\051\023\332\024\052" +
    "\025\044\031\331\036\054\040\253\043\056\060\065\061" +
    "\064\065\035\001\001\000\006\023\333\040\253\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\006\060\007" +
    "\036\014\057\016\047\017\037\020\062\022\051\023\336" +
    "\024\052\025\044\031\335\036\054\040\253\043\056\060" +
    "\065\061\064\065\035\001\001\000\006\023\337\040\253" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\004\107\006\106\062\074" +
    "\063\101\064\360\065\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\037\u0102\001\001\000\042\006\060\007\036\014\057" +
    "\016\047\017\037\020\062\022\051\024\052\025\044\031" +
    "\045\036\054\041\u0100\043\056\060\065\061\064\065\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\006\060\007\036\014\057\016\047\017\037" +
    "\020\062\022\051\024\052\025\044\031\045\036\054\041" +
    "\u0104\043\056\060\065\061\064\065\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\u010e" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\u0110\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\u0111\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\u0114\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\u011d\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\u011f\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\u0126\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\006\060" +
    "\007\036\014\057\016\047\017\037\020\062\022\051\024" +
    "\052\025\044\031\u012a\036\054\043\056\047\u0128\060\065" +
    "\061\064\065\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\042\u0146\001\001\000\004\071\u0133" +
    "\001\001\000\010\032\u0137\033\u0136\034\u0134\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\042\u0140\001\001" +
    "\000\010\032\u0137\033\u013f\034\u0134\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\u013b\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\u013e\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\u0150\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\u0152\001\001\000\002\001\001\000\006\003\u014c" +
    "\013\u0154\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



 
    String errores = "";
    Boolean has_main = false;
    Boolean first_time = true; 
    Boolean in_method = false;
    tabla ambito;
    HashMap<String,Tipo> seen_types;
    Tipo tmp_tipo;
    ArrayList<Tipo> params; // = new ArrayList<Tipo>();
 
  
    public int getline(Object info){
		 if(info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s=((java_cup.runtime.Symbol)info);
          return s.left;
      }
      return -1;
   
} 


    public void report_error(String message, Object info) {
      StringBuffer m = new StringBuffer("Error");
		 if(info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s=((java_cup.runtime.Symbol)info);
			if(s.left >= 0) {
				m.append(" en linea "+(s.left+1));
				if (s.right >= 0)
					m.append(", y columna "+(s.right+1));
			}
		}
        message = message.replaceAll("Syntax error","Error de sintaxis");
 		    m.append(" : "+message);
 
        errores += m;
        errores += "\n";
       if(!first_time)
        System.out.println(m);
 }

    public void report_fatal_error(String message, Object info) {
          message = message.replaceAll("Couldn't repair and continue parse","No se pudo recuperar");
        	report_error(message, info);
        
		System.exit(1);
    }

    public void report_semantic_error(String error,int linea,int columna){
      System.out.println("Error semantico en la linea: "  + (linea+1) + " columna: "  + (columna+1) + "\n" + error  );
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // declaracion2 ::= error 
            {
              Object RESULT = null;
		 if(!parser.first_time) parser.report_error("Se esperaba <id> As <tipo> ",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*declaracion2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // declaracion2 ::= NAME AS tipo 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Tipo t1 = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
              int linea = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
              int columna = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;

                if( parser.first_time) {
                                      boolean meter =parser.tmp_tipo.agregar_atributos(n1,t1);
                                     if(!meter) parser.report_semantic_error("No se puede agregar atributo de nombre " + n1 + " ya existe en este contexto",linea,columna);
                      
                   }
        
              CUP$parser$result = new java_cup.runtime.Symbol(26/*declaracion2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // declaracion2 ::= DIM NAME AS tipo 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Tipo t1 = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
              int linea = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
              int columna = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;

              if(parser.first_time){ 
                      boolean meter = parser.tmp_tipo.agregar_atributos(n1,t1);
                      if(!meter) parser.report_semantic_error("No se puede agregar atributo de nombre " + n1 + " ya existe en este contexto",linea,columna);
                                      }  
              CUP$parser$result = new java_cup.runtime.Symbol(26/*declaracion2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // variables_declar2 ::= declaracion2 FIN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(24/*variables_declar2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // list_declar2 ::= variables_declar2 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(25/*list_declar2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // list_declar2 ::= variables_declar2 list_declar2 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(25/*list_declar2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // dectype ::= TYPE NAME error end_type FIN 
            {
              Object RESULT = null;
		 if(!parser.first_time) parser.report_error(" estructura no puede estar vacia",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*dectype*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // dectype ::= TYPE NAME FIN NT$3 list_declar2 end_type FIN 
            {
              Object RESULT = null;
              // propagate RESULT from NT$3
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		 if(parser.first_time) {parser.seen_types.put(n1,parser.tmp_tipo);
                                                        } 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*dectype*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // NT$3 ::= 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 if(parser.first_time) {parser.tmp_tipo = new Tipo(n1); parser.tmp_tipo.setTipoFinal(3);} 
              CUP$parser$result = new java_cup.runtime.Symbol(55/*NT$3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // rango ::= NAME IGUAL error TO expression 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Se esperaba valor de inicio",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*rango*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // rango ::= NAME IGUAL expression TO error 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Se esperaba valor de final",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*rango*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // rango ::= NAME IGUAL error TO error 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Error de rangos",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*rango*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // rango ::= NAME IGUAL error 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Error de rangos/asignacion",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*rango*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // rango ::= NAME IGUAL error TO 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Error de rangos, valor inicial y final",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*rango*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // rango ::= NAME IGUAL TO error 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Error de rangos, no existe valor inicial",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*rango*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // rango ::= NAME IGUAL expression TO expression 
            {
              Object RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto t1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Objeto t2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
               int linea = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
               int columna = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                
              if(!parser.first_time){
                  if( !t1.t.getName().equals("integer"))
                      parser.report_semantic_error("Rango no numerico en expression inicial",linea,columna);
                  if( !t2.t.getName().equals("integer"))
                      parser.report_semantic_error("Rango no numerico en expression inicial",linea,columna);
              }

          
              CUP$parser$result = new java_cup.runtime.Symbol(38/*rango*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // loop_for ::= FOR rango FIN bloque error 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Se esperaba un Next",sym.NEXT); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*loop_for*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // loop_for ::= FOR rango FIN error 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Se esperaba un Next",sym.NEXT); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*loop_for*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // loop_for ::= FOR error FIN bloque NEXT FIN 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Error en rango",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*loop_for*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // loop_for ::= FOR error FIN NEXT FIN 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Error en rango",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*loop_for*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // loop_for ::= FOR rango FIN NEXT FIN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*loop_for*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // loop_for ::= FOR rango FIN bloque NEXT FIN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*loop_for*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // salir_loop ::= error 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("se esperaba salida de while",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(39/*salir_loop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // salir_loop ::= LOOP FIN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(39/*salir_loop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // do_loop ::= DO WHILE error FIN bloque salir_loop 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Se esperaba expresion booleana",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*do_loop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // do_loop ::= DO WHILE error FIN salir_loop 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Se esperaba expresion booleana",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*do_loop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // do_loop ::= DO error fake_while FIN salir_loop 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Se esperaba While <expresion booleana> ",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*do_loop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // do_loop ::= DO error fake_while FIN bloque salir_loop 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Se esperaba While <expresion booleana> ",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*do_loop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // do_loop ::= DO WHILE fake_while FIN salir_loop 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*do_loop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // do_loop ::= DO WHILE fake_while FIN bloque salir_loop 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*do_loop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // fake_if ::= expression 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
              int linea = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
              int columna = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                if(!parser.first_time){
                  if(!e.t.getName().equals("boolean")){
                      parser.report_semantic_error("Se esperaba expression booleana dentro del If",linea,columna);
                  }
                }              
  
              
              CUP$parser$result = new java_cup.runtime.Symbol(45/*fake_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // fake_while ::= expression 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		

                    int linea = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                    int columna = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;

                if(!parser.first_time){
                  if(!e.t.getName().equals("boolean") ){
                      parser.report_semantic_error("Se esperaba expression booleana dentro de ciclo while",linea,columna);
                  }
                }              
  
              
              CUP$parser$result = new java_cup.runtime.Symbol(44/*fake_while*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // salir_if ::= END error 
            {
              Object RESULT = null;
		if (!parser.first_time) parser.report_error("Se esperaba End If",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*salir_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // salir_if ::= END IF 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(30/*salir_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // if_inner ::= error salir_if 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Error del bloque if, sentencia no esperada",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*if_inner*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // if_inner ::= ELSE FIN error salir_if FIN 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Sentencia inesperada despues del Else",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*if_inner*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // if_inner ::= ELSEIF error THEN FIN bloque if_inner 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Se esperaba expresion booleana",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*if_inner*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // if_inner ::= ELSEIF error FIN bloque if_inner 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Se esperaba expresion booleana",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*if_inner*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // if_inner ::= ELSEIF error THEN FIN if_inner 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Se esperaba expresion booleana",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*if_inner*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // if_inner ::= ELSEIF error FIN if_inner 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Se esperaba expresion booleana",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*if_inner*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // if_inner ::= ELSEIF fake_if THEN FIN if_inner 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*if_inner*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // if_inner ::= ELSEIF fake_if FIN if_inner 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*if_inner*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // if_inner ::= ELSEIF fake_if THEN FIN bloque if_inner 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*if_inner*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // if_inner ::= ELSEIF fake_if FIN bloque if_inner 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*if_inner*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // if_inner ::= ELSE error 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Error en expresion Else",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*if_inner*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // if_inner ::= ELSE FIN salir_if FIN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*if_inner*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // if_inner ::= ELSE FIN bloque salir_if FIN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*if_inner*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // if_inner ::= salir_if FIN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*if_inner*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // if_block ::= IF error THEN FIN bloque if_inner 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Se esperaba expresion booleana",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*if_block*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // if_block ::= IF error FIN bloque if_inner 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Se esperaba expresion booleana",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*if_block*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // if_block ::= IF error THEN FIN if_inner 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Se esperaba expresion booleana",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*if_block*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // if_block ::= IF error FIN if_inner 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Se esperaba expresion booleana",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*if_block*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // if_block ::= IF fake_if FIN if_inner 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*if_block*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // if_block ::= IF fake_if THEN FIN if_inner 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*if_block*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // if_block ::= IF fake_if FIN bloque if_inner 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*if_block*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // if_block ::= IF fake_if THEN FIN bloque if_inner 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*if_block*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // argument ::= error NAME AS tipo 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("error en argumento, no existe tipo de referencia",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*argument*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // argument ::= REF error AS tipo 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error(" error en argumento, no existe nombre de argumento",sym.NAME); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*argument*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // argument ::= REF NAME error 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error(" error en argumento, se esperaba As <un tipo de dato>",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*argument*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // argument ::= REF NAME AS error 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error(" error en argumento, se esperaba un tipo de dato",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*argument*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // argument ::= REF NAME AS tipo 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                                      if(parser.first_time){ 
                                          parser.ambito.agregarATabla(n1,t);
                                          parser.tmp_tipo.metodo_var.add(t);
                                        }
                                    
              CUP$parser$result = new java_cup.runtime.Symbol(20/*argument*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // argumentlistHelper ::= error PARIZQ 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("error de argumentos",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*argumentlistHelper*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // argumentlistHelper ::= PARIZQ 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*argumentlistHelper*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // argumentlistHelper ::= SEPARADOR argument argumentlistHelper 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*argumentlistHelper*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // schrodingerArgument ::= error 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("error de argumentos",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*schrodingerArgument*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // schrodingerArgument ::= PARIZQ 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*schrodingerArgument*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // schrodingerArgument ::= argument argumentlistHelper 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*schrodingerArgument*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // argumentlist ::= PARDER schrodingerArgument 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*argumentlist*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // salir_param ::= PARIZQ 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(27/*salir_param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // paramHelper ::= salir_param 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(35/*paramHelper*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // paramHelper ::= SEPARADOR expression NT$2 paramHelper 
            {
              Object RESULT = null;
              // propagate RESULT from NT$2
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(35/*paramHelper*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NT$2 ::= 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
if(!parser.first_time)parser.params.add(e.t); 
              CUP$parser$result = new java_cup.runtime.Symbol(54/*NT$2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // parametros ::= salir_param 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(36/*parametros*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // parametros ::= expression NT$1 paramHelper 
            {
              Object RESULT = null;
              // propagate RESULT from NT$1
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(36/*parametros*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // NT$1 ::= 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
 if(!parser.first_time)parser.params.add(e.t);
                   
              CUP$parser$result = new java_cup.runtime.Symbol(53/*NT$1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // funcionCall ::= NAME PARDER NT$0 parametros 
            {
              Tipo RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Tipo) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
             int linea = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
             int columna = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                if(!parser.first_time){

             boolean valido = true;
                  Tipo tmp = parser.seen_types.get(n1);
                if(tmp == null){
                      parser.report_semantic_error(" No existe metodo con nombre " + n1 ,linea,columna);
                      RESULT = parser.seen_types.get("error");
                }
                else{
                  if (tmp.metodo_var.size() -1 != parser.params.size()){
                    parser.report_semantic_error(" Error de argumentos,se esperaban: " + (tmp.metodo_var.size() -1) + " recibidos:" + parser.params.size(),linea,columna); 
                  }
                  else{
                    for( int i = 0; i < parser.params.size();i++){
                            if(!parser.params.get(i).getName().equals(tmp.metodo_var.get(i).getName())){
                              parser.report_semantic_error(" Error de argumento " + i + " se esperaba " +  tmp.metodo_var.get(i).getName() + " recibio " + parser.params.get(i),linea,columna);
                          }
                    }
                  }
                  
                   RESULT = tmp.metodo_var.get( tmp.metodo_var.size()-1);
                }
          }
            
              CUP$parser$result = new java_cup.runtime.Symbol(4/*funcionCall*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$0 ::= 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 if(!parser.first_time) parser.params = new ArrayList<Tipo>();
              CUP$parser$result = new java_cup.runtime.Symbol(52/*NT$0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // cadena_s ::= CADENA SALTOCADENA error 
            {
              String RESULT = null;
		 if (!parser.first_time) parser.report_error("Se esperaba nueva cadena",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*cadena_s*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // cadena_s ::= CADENA 
            {
              String RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                      RESULT = c; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*cadena_s*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // cadena_s ::= CADENA SALTOCADENA FIN cadena_s 
            {
              String RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String sig = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = c + sig;  
              CUP$parser$result = new java_cup.runtime.Symbol(2/*cadena_s*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // factor ::= funcionCall 
            {
              Objeto RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Tipo f = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new Objeto(f); 
              CUP$parser$result = new java_cup.runtime.Symbol(49/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // factor ::= cadena_s 
            {
              Objeto RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 Objeto t = new Objeto(parser.seen_types.get("string")); 
                      String fin = "";
                      for(char c:s.toCharArray()){
                        if( c != '"')
                           fin += c;
                      }
                    t.SizeChain= fin.length();
                      RESULT = t;
              CUP$parser$result = new java_cup.runtime.Symbol(49/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // factor ::= FALSE 
            {
              Objeto RESULT = null;
		 RESULT= new Objeto(parser.seen_types.get("boolean")); 
              CUP$parser$result = new java_cup.runtime.Symbol(49/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // factor ::= TRUE 
            {
              Objeto RESULT = null;
		 RESULT=  new Objeto(parser.seen_types.get("boolean")); 
              CUP$parser$result = new java_cup.runtime.Symbol(49/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // factor ::= nombre 
            {
              Objeto RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Objeto n = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = n; 
              CUP$parser$result = new java_cup.runtime.Symbol(49/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // factor ::= NUM 
            {
              Objeto RESULT = null;
		 RESULT = new Objeto(parser.seen_types.get("integer")); 
              CUP$parser$result = new java_cup.runtime.Symbol(49/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // factor ::= NOT factor 
            {
              Objeto RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Objeto f1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                            int linea = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                            int columna = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                            
                            if(!parser.first_time){ 
                              if( f1.t.getName().equals("variant" ) && f1.t.TipoExtraVariant.getName().equals("boolean")){  
                                RESULT = f1;
                              }
                              else if(!f1.t.getName().equals("boolean")  ) 
                                  parser.report_semantic_error("Tipo no booleano en expresion",linea,columna);
                                  RESULT = new Objeto(parser.seen_types.get("boolean")); 
                              RESULT = f1;  
                            }
                            else{
                                RESULT = f1;    

                            }
                        
              CUP$parser$result = new java_cup.runtime.Symbol(49/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // factor ::= PARDER expression PARIZQ 
            {
              Objeto RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(49/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // termino ::= factor 
            {
              Objeto RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Objeto f = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = f; 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*termino*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // termino ::= factor OPREL termino 
            {
              Objeto RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto f = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Objeto t = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                if(!parser.first_time){
                  if(f.t.getName().equals(t.t.getName()) && f.t.getName().equals("integer")){
                    RESULT = new Objeto(parser.seen_types.get("boolean"));
                  } 
                  else{
                    int linea = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                    int columna = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;

                    parser.report_semantic_error(" No se puede comparar " + f.t.getName() + " con " + t.t.getName(),linea,columna);
                    RESULT = new Objeto(parser.seen_types.get("boolean"));
                  }
                }
              
              CUP$parser$result = new java_cup.runtime.Symbol(48/*termino*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // termino ::= factor ENTRE termino 
            {
              Objeto RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto f = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Objeto t = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                int linea = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                int columna = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                
                if(!parser.first_time){
                  if(f.t.getName().equals(t.t.getName()) && f.t.getName().equals("integer") ){
                    RESULT = new Objeto(parser.seen_types.get("integer"));
                  
                  }
                  else if( f.t.getName().equals(t.t.getName()) && f.t.getName().equals("variant") 
                            && f.t.TipoExtraVariant.getName().equals(t.t.TipoExtraVariant.getName()) 
                            && f.t.TipoExtraVariant.getName().equals("integer") ){
                        RESULT = new Objeto(parser.seen_types.get("integer"));
                  }
                  else if( f.t.getName().equals("variant") && f.t.TipoExtraVariant.getName().equals("integer")  && t.t.getName().equals("integer")){
                        RESULT = new Objeto(parser.seen_types.get("integer"));
                  }
                  else if( t.t.getName().equals("variant") && t.t.TipoExtraVariant.getName().equals("integer")  && f.t.getName().equals("integer")){
                        RESULT = new Objeto(parser.seen_types.get("integer"));
                  }
  
                  else{

                    parser.report_semantic_error(" No se puede dividir " + f.t.getName() + " con " + t.t.getName(),linea,columna);
                    RESULT = new Objeto(parser.seen_types.get("integer"));
                  }
                }
              
              CUP$parser$result = new java_cup.runtime.Symbol(48/*termino*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // termino ::= factor POR termino 
            {
              Objeto RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto f = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Objeto t = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                int linea = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                int columna = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                
                if(!parser.first_time){
                  if(f.t.getName().equals(t.t.getName()) && f.t.getName().equals("integer") ){
                    RESULT = new Objeto(parser.seen_types.get("integer"));
                  
                  }
                  else if( f.t.getName().equals(t.t.getName()) && f.t.getName().equals("variant") 
                            && f.t.TipoExtraVariant.getName().equals(t.t.TipoExtraVariant.getName()) 
                            && f.t.TipoExtraVariant.getName().equals("integer") ){
                        RESULT = new Objeto(parser.seen_types.get("integer"));
                  }
                  else if( f.t.getName().equals("variant") && f.t.TipoExtraVariant.getName().equals("integer")  && t.t.getName().equals("integer")){
                        RESULT = new Objeto(parser.seen_types.get("integer"));
                  }
                  else if( t.t.getName().equals("variant") && t.t.TipoExtraVariant.getName().equals("integer")  && f.t.getName().equals("integer")){
                        RESULT = new Objeto(parser.seen_types.get("integer"));
                  }
  
                  else{

                    parser.report_semantic_error(" No se puede multiplicar " + f.t.getName() + " con " + t.t.getName(),linea,columna);
                    RESULT = new Objeto(parser.seen_types.get("integer"));
                  }
                }
              
              CUP$parser$result = new java_cup.runtime.Symbol(48/*termino*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expression ::= expression IGUAL termino 
            {
              Objeto RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Objeto t = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Objeto(parser.seen_types.get("boolean"));
              CUP$parser$result = new java_cup.runtime.Symbol(50/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expression ::= termino 
            {
              Objeto RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Objeto t = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = t; 
              CUP$parser$result = new java_cup.runtime.Symbol(50/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expression ::= expression MENOS termino 
            {
              Objeto RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Objeto t = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                int linea = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                int columna = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                
                if(!parser.first_time){
                  if(e.t.getName().equals(t.t.getName()) && e.t.getName().equals("integer") ){
                    RESULT = new Objeto(parser.seen_types.get("integer"));
                  
                  }
                  else if( e.t.getName().equals(t.t.getName()) && e.t.getName().equals("variant") 
                            && e.t.TipoExtraVariant.getName().equals(t.t.TipoExtraVariant.getName()) 
                            && e.t.TipoExtraVariant.getName().equals("integer") ){
                        RESULT = new Objeto(parser.seen_types.get("integer"));
                  }
                  else if( e.t.getName().equals("variant") && e.t.TipoExtraVariant.getName().equals("integer")  && t.t.getName().equals("integer")){
                        RESULT = new Objeto(parser.seen_types.get("integer"));
                  }
                  else if( t.t.getName().equals("variant") && t.t.TipoExtraVariant.getName().equals("integer")  && e.t.getName().equals("integer")){
                        RESULT = new Objeto(parser.seen_types.get("integer"));
                  }
  
                  else{

                    parser.report_semantic_error(" No se puede restar " + e.t.getName() + " con " + t.t.getName(),linea,columna);
                    RESULT = new Objeto(parser.seen_types.get("integer"));
                  }
                }
              
              CUP$parser$result = new java_cup.runtime.Symbol(50/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expression ::= expression MAS termino 
            {
              Objeto RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Objeto t = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                int linea = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                int columna = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                
                if(!parser.first_time){
                  if(e.t.getName().equals(t.t.getName()) && e.t.getName().equals("integer") ){
                    RESULT = new Objeto(parser.seen_types.get("integer"));
                  
                  }
                  else if( e.t.getName().equals(t.t.getName()) && e.t.getName().equals("variant") 
                            && e.t.TipoExtraVariant.getName().equals(t.t.TipoExtraVariant.getName()) 
                            && e.t.TipoExtraVariant.getName().equals("integer") ){
                        RESULT = new Objeto(parser.seen_types.get("integer"));
                  }
                  else if( e.t.getName().equals("variant") && e.t.TipoExtraVariant.getName().equals("integer")  && t.t.getName().equals("integer")){
                        RESULT = new Objeto(parser.seen_types.get("integer"));
                  }
                  else if( t.t.getName().equals("variant") && t.t.TipoExtraVariant.getName().equals("integer")  && e.t.getName().equals("integer")){
                        RESULT = new Objeto(parser.seen_types.get("integer"));
                  }
  
                  else{

                    parser.report_semantic_error(" No se puede sumar " + e.t.getName() + " con " + t.t.getName(),linea,columna);
                    RESULT = new Objeto(parser.seen_types.get("integer"));
                  }
                }
              
              CUP$parser$result = new java_cup.runtime.Symbol(50/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // nombre ::= NAME PUNTO error 
            {
              Objeto RESULT = null;
		 if (!parser.first_time) parser.report_error(" Error de <id> en asignacion ",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(51/*nombre*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // nombre ::= NAME PUNTO NAME 
            {
              Objeto RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                      int linea = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                      int columna = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                      if(!parser.first_time){
                        Tipo tmp = parser.ambito.BuscarEnTabla(n1);
                         if( tmp.getName().equals("error")){
                              parser.report_semantic_error("Variable " + n1 + " no fue declarada/con punto" , linea,columna);
                              RESULT =  new Objeto(parser.seen_types.get("error"));
                        }
                        else{
                            tmp = parser.seen_types.get(tmp.getName()).atributos.get(n2);
                            if( tmp == null){
                                parser.report_semantic_error(n1 + " no cuenta con atributo " + n2,linea,columna);
                                RESULT = new Objeto(parser.seen_types.get("error"));
                            }
                            else{
                                 RESULT = new Objeto(tmp);
                            }
                          }              
                        
                        }
                    
              CUP$parser$result = new java_cup.runtime.Symbol(51/*nombre*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // nombre ::= NAME 
            {
              Objeto RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                    int linea = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                    int columna = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                    if(!parser.first_time){
                      Tipo tmp = parser.ambito.BuscarEnTabla(n1);
                      if( tmp.getName().equals("error"))
                          parser.report_semantic_error("Variable " + n1 + " no fue declarada" , linea,columna);
                      RESULT = new Objeto(tmp);
                      } 
                    
              CUP$parser$result = new java_cup.runtime.Symbol(51/*nombre*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // asignacion ::= nombre IGUAL error FIN 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("No se puede asignar valor, error en expresion ",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*asignacion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // asignacion ::= nombre IGUAL expression FIN 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Objeto n = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
            
            if(!parser.first_time)
            {

              
              if(!n.t.getName().equals(e.t.getName()) && !n.t.getName().equals("variant") )
              {
                

                if( e.t.getName().equals("variant") && e.t.TipoExtraVariant.getName().equals( n.t.getName() ) ){
                
                }
                else if(!( n.t.getName().equals("char") && e.t.getName().equals("string") && e.SizeChain <= 1)){
                  int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                  int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                  parser.report_semantic_error("No se puede asignar " +  e.t.getName() + " a variable de tipo " + n.t.getName(),left,right);       
               }      
                

                
              }
              else if( n.t.getName().equals("variant") && !e.t.getName().equals("error")){
                  n.t.TipoExtraVariant = e.t;
              }
               
            }
              
              CUP$parser$result = new java_cup.runtime.Symbol(16/*asignacion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // lee ::= INPUT error 
            {
              Objeto RESULT = null;
		 if (!parser.first_time) parser.report_error(" Se esperaba variable",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(46/*lee*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // lee ::= INPUT nombre FIN 
            {
              Objeto RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(46/*lee*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // escribe ::= WRITELN error 
            {
              Objeto RESULT = null;
		 if (!parser.first_time) parser.report_error("Se esperaba cadena o variable",sym.WRITELN); 
              CUP$parser$result = new java_cup.runtime.Symbol(47/*escribe*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // escribe ::= WRITELN cadena_s FIN 
            {
              Objeto RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(47/*escribe*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // escribe ::= WRITELN nombre FIN 
            {
              Objeto RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(47/*escribe*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // escribe ::= WRITE error 
            {
              Objeto RESULT = null;
		 if (!parser.first_time) parser.report_error("Se esperaba cadena o variable",sym.WRITE);
              CUP$parser$result = new java_cup.runtime.Symbol(47/*escribe*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // escribe ::= WRITE nombre FIN 
            {
              Objeto RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(47/*escribe*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // escribe ::= WRITE cadena_s FIN 
            {
              Objeto RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(47/*escribe*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // statement ::= NAME error 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error(" Expresion no se esperaba.",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // statement ::= RETURN expression FIN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // statement ::= RETURN FIN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // statement ::= lee 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // statement ::= escribe 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // statement ::= funcionCall FIN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // statement ::= asignacion 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // statement ::= do_loop 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // statement ::= loop_for 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // statement ::= if_block 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // list_expressions ::= statement 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*list_expressions*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // list_expressions ::= statement list_expressions 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*list_expressions*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // list_declar ::= variables_declar 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*list_declar*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // list_declar ::= variables_declar list_declar 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*list_declar*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // bloque ::= regresar 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*bloque*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // bloque ::= list_declar regresar 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*bloque*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // bloque ::= list_declar 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*bloque*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // bloque ::= list_declar list_expressions regresar 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*bloque*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // bloque ::= list_declar list_expressions 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*bloque*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // bloque ::= list_expressions regresar 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*bloque*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // bloque ::= list_expressions 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*bloque*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // regresar ::= EXIT error 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error(" Salida de metodos: se esperaba Exit Sub o Exit Function",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*regresar*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // regresar ::= EXIT FUNCTION FIN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(33/*regresar*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // regresar ::= EXIT SUB FIN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(33/*regresar*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // end_type ::= END error 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Se esperaba End Type",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(32/*end_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // end_type ::= END TYPE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(32/*end_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // end_func ::= bloque END error 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error(" Se esperaba End Function", sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*end_func*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // end_func ::= END FUNCTION 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(31/*end_func*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // end_func ::= bloque END FUNCTION 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(31/*end_func*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // end_sub ::= END error 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error(" Se esperaba End Sub",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*end_sub*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // end_sub ::= END SUB 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(37/*end_sub*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // end_sub ::= bloque END SUB 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(37/*end_sub*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // retorno ::= AS error 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error(" Tipo de retorno invalido de funcion, se esperaba: As <char|integer|string|boolean>",sym.AS); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*retorno*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // retorno ::= error 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error(" No existe tipo de retorno de funcion, se esperaba: As <Tipo>",sym.AS); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*retorno*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // retorno ::= AS TIPO 
            {
              Object RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  
                            if(parser.first_time){parser.tmp_tipo.metodo_var.add(parser.seen_types.get(t1)); 
                                  parser.seen_types.put( parser.tmp_tipo.getName(), parser.tmp_tipo);
                            }
                            else{
                                      Tipo x = parser.seen_types.get(t1.toLowerCase());
                                      parser.ambito.agregarATabla(parser.ambito.ambito, x   );
                            }
                        
              CUP$parser$result = new java_cup.runtime.Symbol(29/*retorno*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // fake_s ::= NAME 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                      if(parser.first_time){
                      tabla nuevo_ambito = new tabla(parser.ambito,n1); 
                      parser.ambito.hijos.add(nuevo_ambito);
                      parser.ambito = nuevo_ambito;
                      parser.tmp_tipo = new Tipo(n1);
                      parser.tmp_tipo.setTipoFinal(2);
                      if (n1.toLowerCase().equals("main")) parser.has_main = true; 
                                }
                      else{
                          for(tabla t:parser.ambito.hijos)
                           {
                                if( t.ambito.equals(n1))
                                {  parser.ambito = t; 
                                    break;}
                           }
                       }


                     
              CUP$parser$result = new java_cup.runtime.Symbol(43/*fake_s*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // fake_f ::= NAME 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 if(parser.first_time){ 
                         tabla nuevo_ambito = new tabla(parser.ambito,n1);
                         parser.ambito.hijos.add(nuevo_ambito);
                         parser.ambito = nuevo_ambito;
                         parser.tmp_tipo = new Tipo(n1);
                         parser.tmp_tipo.setTipoFinal(1);
                      }
                      else{
                          
                        for(tabla t:parser.ambito.hijos)
                           {
                                if( t.ambito.equals(n1))
                                {  parser.ambito = t; 
                                    break;}
                           }
                       }
                    
              CUP$parser$result = new java_cup.runtime.Symbol(42/*fake_f*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // funcion ::= FUNCTION fake_f error 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Error en firma de funcion",sym.ERROR); parser.ambito = parser.ambito.parent;  
              CUP$parser$result = new java_cup.runtime.Symbol(41/*funcion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // funcion ::= FUNCTION fake_f error FIN end_func FIN 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("error de parametros",sym.ERROR); parser.ambito = parser.ambito.parent; 
              CUP$parser$result = new java_cup.runtime.Symbol(41/*funcion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // funcion ::= FUNCTION fake_f error PARIZQ retorno FIN end_func FIN 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("error de parametros",sym.ERROR); parser.ambito = parser.ambito.parent;
              CUP$parser$result = new java_cup.runtime.Symbol(41/*funcion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // funcion ::= FUNCTION error FIN 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Se esperaba nombre de funcion",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(41/*funcion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // funcion ::= FUNCTION fake_f argumentlist retorno FIN error FIN 
            {
              Object RESULT = null;
		 if (!parser.first_time) parser.report_error("Error en el bloque de funcion",sym.ERROR); parser.ambito = parser.ambito.parent;
              CUP$parser$result = new java_cup.runtime.Symbol(41/*funcion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // funcion ::= FUNCTION fake_f argumentlist retorno FIN end_func FIN 
            {
              Object RESULT = null;
		 parser.ambito = parser.ambito.parent;  
              CUP$parser$result = new java_cup.runtime.Symbol(41/*funcion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // subfunc ::= SUB fake_s argumentlist FIN end_sub FIN 
            {
              Object RESULT = null;
		 parser.ambito = parser.ambito.parent; 
              CUP$parser$result = new java_cup.runtime.Symbol(40/*subfunc*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // metodo ::= funcion 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*metodo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // metodo ::= subfunc 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*metodo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo ::= NAME 
            {
              Tipo RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                   Tipo x = parser.seen_types.get(n1.toLowerCase());
                    if( x ==null)
                    {
                      x = new Tipo(n1.toLowerCase());
                    }
                    RESULT = x;   
              CUP$parser$result = new java_cup.runtime.Symbol(3/*tipo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo ::= TIPO 
            {
              Tipo RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                     Tipo x = parser.seen_types.get(n1.toLowerCase());
                    RESULT = x;
                  
              CUP$parser$result = new java_cup.runtime.Symbol(3/*tipo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // vars ::= NAME SEPARADOR error 
            {
              String RESULT = null;
		
              int columna = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
              int linea = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
             if(!parser.first_time) parser.report_semantic_error("Declaracion de variables: Se esperaba nombre",linea,columna); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*vars*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // vars ::= NAME SEPARADOR vars 
            {
              String RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
              int columna = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
              int linea = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
          if ( parser.first_time ){ 
                  boolean meter =  parser.ambito.agregarATabla(n1.toLowerCase(),parser.seen_types.get("variant") ); 
                  if(!meter ) parser.report_semantic_error("Variable <" + n1 +  "> ya ha sido declarada en este contexto",linea,columna);
                 
                  }
              RESULT = n2.toLowerCase(); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*vars*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // vars ::= NAME 
            {
              String RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = n1.toLowerCase() ; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*vars*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracion ::= error 
            {
              Object RESULT = null;
		 if(!parser.first_time) parser.report_error("Declaracion de variables: Se esperaba ID",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*declaracion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaracion ::= vars AS tipo 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  
                      int linea = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                      int columna = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;


                      if (parser.first_time && !parser.in_method ){boolean meter = parser.ambito.agregarATabla(n1,t ); 
                            if(!meter ) parser.report_semantic_error("Variable <" + n1 +  "> ya ha sido declarada en este contexto",linea,columna);
                        }
                        if ( !parser.first_time && !parser.in_method ){
                            Tipo tmp = parser.ambito.BuscarEnTabla(n1);
                            Tipo extra = parser.seen_types.get(tmp.getName());
                            if(extra== null )
                            {  parser.report_semantic_error(" No existe tipo " + t.getName() + " en la declaracion de variable " + n1,linea,columna); }
                        } 
                        if ( !parser.first_time && parser.in_method ){
                            if( parser.seen_types.get(t.getName()) == null){
                                parser.report_semantic_error("No existe el tipo" + t.getName() + " en la declaracion de la variable" + n1, linea,columna);
                            }
                            else{
                                boolean meter = parser.ambito.agregarATabla(n1,t );
                                if(!meter ) parser.report_semantic_error("Variable <" + n1 +  "> ya ha sido declarada en este contexto",linea,columna);
                            
                              }   
                        }
            
              CUP$parser$result = new java_cup.runtime.Symbol(9/*declaracion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracion ::= vars AS tipo SEPARADOR declaracion 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  
                        //meter las variables globales dentro de la tabla
                        int linea = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                        int columna = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                        
                    if ( parser.first_time && !parser.in_method ){ boolean meter = parser.ambito.agregarATabla(n1,t );
                            if(!meter ) parser.report_semantic_error("Variable <" + n1 +  "> ya ha sido declarada en este contexto",linea,columna);
                        }
                        
                        if ( !parser.first_time && !parser.in_method ){
                            Tipo tmp = parser.ambito.BuscarEnTabla(n1);
                            Tipo extra = parser.seen_types.get(tmp.getName());
                            if(extra== null )
                            {  parser.report_semantic_error(" No existe el tipo " + t.getName() + " en la declaracion de variable " + n1,linea,columna); }
                        } 
                        if ( !parser.first_time && parser.in_method ){
                            if( parser.seen_types.get(t.getName()) == null){
                                parser.report_semantic_error("No existe el tipo" + t.getName() + " en la declaracion de la variable" + n1, linea,columna);
                            }
                            else{
                                boolean meter = parser.ambito.agregarATabla(n1,t );
                                if(!meter ) parser.report_semantic_error("Variable <" + n1 +  "> ya ha sido declarada en este contexto",linea,columna);

                            }   
                        } 
                    
              CUP$parser$result = new java_cup.runtime.Symbol(9/*declaracion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declar_var ::= DIM declaracion 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*declar_var*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // variables_declar ::= declar_var FIN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(28/*variables_declar*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // linea ::= error FIN 
            {
              Object RESULT = null;
		 if(!parser.first_time) parser.report_error(" Se esperaba declaracion de variables, metodos o estructuras",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*linea*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // linea ::= dectype 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*linea*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // linea ::= metodo 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*linea*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // linea ::= declar_var FIN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*linea*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statements ::= linea 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*statements*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statements ::= linea statements 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*statements*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // programa ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*programa*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa ::= FIN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*programa*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= statements 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*programa*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= FIN statements 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*programa*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

